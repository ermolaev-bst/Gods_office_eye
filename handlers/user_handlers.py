"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import logging
import pandas as pd
import os
from aiogram import types, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from config import CHANNEL_USERS_EXCEL, ADMIN_ID, CHANNEL_CHAT_ID
from database import *
from keyboards import *
from states import AuthorizeUser, ProposeNews, MessageUser, Search
from utils import escape_html, validate_fio
from services import ExcelService

logger = logging.getLogger(__name__)


# ============= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò =============

async def request_auth_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    is_auth = await is_authorized(callback_query.from_user.id)
    
    if is_auth:
        await callback_query.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", show_alert=True)
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from handlers.common_handlers import send_main_menu
        await send_main_menu(callback_query.message, user_id=callback_query.from_user.id)
        return
    
    await callback_query.answer()
    await callback_query.message.answer(
        "üëã <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º –±–æ—Ç–µ</b>\n\n"
        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(AuthorizeUser.waiting_for_fio)


async def bot_info_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
    await callback_query.answer()
    await callback_query.message.answer(
        "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n\n"
        "ü§ñ <b>–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ—Ç</b>\n"
        "üìã <b>–§—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏\n"
        "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ñ–µ\n"
        "‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n\n"
        "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.",
        parse_mode=ParseMode.HTML
    )


async def process_fio(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    fio = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –§–ò–û
    if not validate_fio(fio):
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ).\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 3 —Å–∏–º–≤–æ–ª–∞.",
            parse_mode=ParseMode.HTML
        )
        return
    
    await state.update_data(fio=fio)
    await message.answer(
        "‚úÖ <b>–§–ò–û –ø—Ä–∏–Ω—è—Ç–æ!</b>\n\n"
        f"üë§ <b>–í–∞—à–µ –§–ò–û:</b> {escape_html(fio)}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(AuthorizeUser.waiting_for_position)


async def process_position(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    data = await state.get_data()
    fio = data.get('fio')
    position = message.text.strip()
    
    if not position or len(position) < 2:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å.\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 2 —Å–∏–º–≤–æ–ª–∞.",
            parse_mode=ParseMode.HTML
        )
        return
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: user_id={message.from_user.id}, fio={fio}, position={position}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –§–ò–û –≤ Excel —Ñ–∞–π–ª–µ –∫–∞–Ω–∞–ª–∞
    user_found_in_excel = False
    
    if CHANNEL_USERS_EXCEL and os.path.exists(CHANNEL_USERS_EXCEL):
        try:
            df = pd.read_excel(CHANNEL_USERS_EXCEL)
            logger.info(f"Excel —Ñ–∞–π–ª –∫–∞–Ω–∞–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω: {len(df)} —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            
            # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –§–ò–û
            fio_column = None
            for col in df.columns:
                if '—Ñ–∏–æ' in col.lower():
                    fio_column = col
                    break
            
            if fio_column is None:
                fio_column = df.columns[0]
                logger.warning(f"–ö–æ–ª–æ–Ω–∫–∞ —Å –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º: {fio_column}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for index, row in df.iterrows():
                excel_fio = str(row[fio_column]).strip().lower()
                user_fio = fio.lower()
                
                if excel_fio == user_fio or user_fio in excel_fio or excel_fio in user_fio:
                    user_found_in_excel = True
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ Excel: {fio}")
                    break
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Excel —Ñ–∞–π–ª–∞ –∫–∞–Ω–∞–ª–∞: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    try:
        user = message.from_user
        await add_auth_request(
            user_id=user.id,
            username=user.username or "",
            fio=fio,
            position=position
        )
        
        logger.info(f"–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: user_id={user.id}, fio={fio}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            from aiogram import Bot
            from config import BOT_TOKEN
            bot = Bot(token=BOT_TOKEN)
            
            admin_message = (
                f"üìã <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é</b>\n\n"
                f"üë§ <b>–§–ò–û:</b> {escape_html(fio)}\n"
                f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {escape_html(position)}\n"
                f"üÜî <b>User ID:</b> <code>{user.id}</code>\n"
                f"üì± <b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üìä <b>–ù–∞–π–¥–µ–Ω –≤ Excel:</b> {'‚úÖ –î–∞' if user_found_in_excel else '‚ùå –ù–µ—Ç'}\n\n"
                f"üìÖ <b>–í—Ä–µ–º—è:</b> {message.date.strftime('%d.%m.%Y %H:%M')}"
            )
            
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            keyboard_builder = InlineKeyboardBuilder()
            keyboard_builder.add(types.InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user.id}"))
            keyboard_builder.add(types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{user.id}"))
            keyboard_builder.adjust(2)
            keyboard = keyboard_builder.as_markup()
            await bot.send_message(ADMIN_ID, admin_message, reply_markup=keyboard, parse_mode=ParseMode.HTML)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "‚úÖ <b>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üë§ <b>–§–ò–û:</b> {escape_html(fio)}\n"
            f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {escape_html(position)}\n\n"
            "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–æ–º —Ä–µ—à–µ–Ω–∏–∏.",
            parse_mode=ParseMode.HTML
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )


# ============= –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò =============

async def search_employees_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    keyboard = create_search_keyboard()
    await callback_query.message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback_query.answer()


async def download_contacts_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    try:
        excel_service = ExcelService()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        info = excel_service.get_column_info()
        
        if not info:
            await callback_query.answer("‚ùå Excel —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            from aiogram.types import FSInputFile
            
            file = FSInputFile(excel_service.file_path, filename="contacts.xlsx")
            
            caption = (
                f"üì• <b>–ë–∞–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</b>\n\n"
                f"üìä <b>–ó–∞–ø–∏—Å–µ–π:</b> {info.get('row_count', 0)}\n"
                f"üìã <b>–ö–æ–ª–æ–Ω–æ–∫:</b> {info.get('column_count', 0)}\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {message.date.strftime('%d.%m.%Y %H:%M')}"
            )
            
            await callback_query.message.answer_document(
                file,
                caption=caption,
                parse_mode=ParseMode.HTML
            )
            
            logger.info(f"–§–∞–π–ª –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback_query.from_user.id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞", show_alert=True)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ñ–∞–π–ª–∞", show_alert=True)


async def propose_news_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
    await callback_query.answer()
    await callback_query.message.answer(
        "üìù <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(ProposeNews.waiting_for_news)


async def process_news_proposal(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
    news_text = message.text.strip()
    
    if not news_text or len(news_text) < 10:
        await message.answer(
            "‚ùå <b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).",
            parse_mode=ParseMode.HTML
        )
        return
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
        proposal_id = await add_news_proposal(
            user_id=message.from_user.id,
            username=message.from_user.username or "",
            fio=message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            news_text=news_text,
            photos_json=""
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.answer(
            "‚úÖ <b>–ù–æ–≤–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞!</b>\n\n"
            f"üìù <b>–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>\n{escape_html(news_text[:200])}{'...' if len(news_text) > 200 else ''}\n\n"
            "‚è≥ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.",
            parse_mode=ParseMode.HTML
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤/–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        try:
            from aiogram import Bot
            from config import BOT_TOKEN, MODERATOR_ID, MARKETER_ID
            bot = Bot(token=BOT_TOKEN)
            
            notification_text = (
                f"üìù <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏</b>\n\n"
                f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {escape_html(message.from_user.full_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üÜî <b>User ID:</b> <code>{message.from_user.id}</code>\n\n"
                f"üìÑ <b>–¢–µ–∫—Å—Ç:</b>\n{escape_html(news_text[:300])}{'...' if len(news_text) > 300 else ''}\n\n"
                f"üìÖ <b>–í—Ä–µ–º—è:</b> {message.date.strftime('%d.%m.%Y %H:%M')}"
            )
            
            keyboard = create_news_approval_keyboard(proposal_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
            await bot.send_message(ADMIN_ID, notification_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –∏ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥—É, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            for user_id in [MODERATOR_ID, MARKETER_ID]:
                if user_id and user_id != 0:
                    try:
                        await bot.send_message(user_id, notification_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
                    except:
                        pass
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )


# ============= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–ò–°–ö–ê =============

async def search_by_fio_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ –§–ò–û"""
    await callback_query.answer()
    await callback_query.message.answer(
        "üë§ <b>–ü–æ–∏—Å–∫ –ø–æ –§–ò–û</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏–ª–∏ —á–∞—Å—Ç—å –§–ò–û –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(Search.waiting_for_fio)


async def search_by_position_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    await callback_query.answer()
    await callback_query.message.answer(
        "üíº <b>–ü–æ–∏—Å–∫ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –µ—ë —á–∞—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(Search.waiting_for_position)


async def search_by_department_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ –æ—Ç–¥–µ–ª—É"""
    await callback_query.answer()
    await callback_query.message.answer(
        "üè¢ <b>–ü–æ–∏—Å–∫ –ø–æ –æ—Ç–¥–µ–ª—É</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(Search.waiting_for_department)


async def process_search_fio(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –§–ò–û"""
    query = message.text.strip()
    
    if len(query) < 2:
        await message.answer(
            "‚ùå <b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.",
            parse_mode=ParseMode.HTML
        )
        return
    
    try:
        excel_service = ExcelService()
        results = excel_service.search_by_fio(query)
        
        if not results:
            await message.answer(
                f"‚ùå <b>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
                f"–ü–æ –∑–∞–ø—Ä–æ—Å—É <i>'{escape_html(query)}'</i> —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                parse_mode=ParseMode.HTML
            )
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –§–ò–û</b>\n"
            text += f"üìù <b>–ó–∞–ø—Ä–æ—Å:</b> {escape_html(query)}\n"
            text += f"üìä <b>–ù–∞–π–¥–µ–Ω–æ:</b> {len(results)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫(–æ–≤)\n\n"
            
            for i, result in enumerate(results[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                fio = result.get('–§–ò–û', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                position = result.get('–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                department = result.get('–û—Ç–¥–µ–ª', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                phone = result.get('–ù–æ–º–µ—Ä –¢–µ–ª–µ—Ñ–æ–Ω–∞', result.get('–¢–µ–ª–µ—Ñ–æ–Ω', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
                photo = result.get('–§–æ—Ç–æ', '')
                
                text += f"<b>{i}.</b> üë§ <b>{escape_html(str(fio))}</b>\n"
                text += f"üíº {escape_html(str(position))}\n"
                if str(department) != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                    text += f"üè¢ {escape_html(str(department))}\n"
                if str(phone) != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                    text += f"üìû {escape_html(str(phone))}\n"
                if photo and str(photo) != 'nan':
                    text += f"üì∑ <b>–§–æ—Ç–æ:</b> {escape_html(str(photo))}\n"
                text += "\n"
            
            if len(results) > 10:
                text += f"... –∏ –µ—â—ë {len(results) - 10} —Ä–µ–∑—É–ª—å—Ç–∞—Ç(–æ–≤)"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="search_employees"))
            builder.add(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            builder.adjust(1)
            keyboard = builder.as_markup()
            
            await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –§–ò–û: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )


async def process_search_position(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    query = message.text.strip()
    
    if len(query) < 2:
        await message.answer(
            "‚ùå <b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.",
            parse_mode=ParseMode.HTML
        )
        return
    
    try:
        excel_service = ExcelService()
        results = excel_service.search_by_position(query)
        
        if not results:
            await message.answer(
                f"‚ùå <b>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
                f"–ü–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ <i>'{escape_html(query)}'</i> —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                parse_mode=ParseMode.HTML
            )
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏</b>\n"
            text += f"üìù <b>–ó–∞–ø—Ä–æ—Å:</b> {escape_html(query)}\n"
            text += f"üìä <b>–ù–∞–π–¥–µ–Ω–æ:</b> {len(results)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫(–æ–≤)\n\n"
            
            for i, result in enumerate(results[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                fio = result.get('–§–ò–û', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                position = result.get('–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                department = result.get('–û—Ç–¥–µ–ª', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                phone = result.get('–ù–æ–º–µ—Ä –¢–µ–ª–µ—Ñ–æ–Ω–∞', result.get('–¢–µ–ª–µ—Ñ–æ–Ω', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
                photo = result.get('–§–æ—Ç–æ', '')
                
                text += f"<b>{i}.</b> üë§ <b>{escape_html(str(fio))}</b>\n"
                text += f"üíº {escape_html(str(position))}\n"
                if str(department) != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                    text += f"üè¢ {escape_html(str(department))}\n"
                if str(phone) != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                    text += f"üìû {escape_html(str(phone))}\n"
                if photo and str(photo) != 'nan':
                    text += f"üì∑ <b>–§–æ—Ç–æ:</b> {escape_html(str(photo))}\n"
                text += "\n"
            
            if len(results) > 10:
                text += f"... –∏ –µ—â—ë {len(results) - 10} —Ä–µ–∑—É–ª—å—Ç–∞—Ç(–æ–≤)"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="search_employees"))
            builder.add(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            builder.adjust(1)
            keyboard = builder.as_markup()
            
            await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )


async def process_search_department(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –æ—Ç–¥–µ–ª—É"""
    query = message.text.strip()
    
    if len(query) < 2:
        await message.answer(
            "‚ùå <b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.",
            parse_mode=ParseMode.HTML
        )
        return
    
    try:
        excel_service = ExcelService()
        results = excel_service.search_by_department(query)
        
        if not results:
            await message.answer(
                f"‚ùå <b>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
                f"–í –æ—Ç–¥–µ–ª–µ <i>'{escape_html(query)}'</i> —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                parse_mode=ParseMode.HTML
            )
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –æ—Ç–¥–µ–ª—É</b>\n"
            text += f"üìù <b>–ó–∞–ø—Ä–æ—Å:</b> {escape_html(query)}\n"
            text += f"üìä <b>–ù–∞–π–¥–µ–Ω–æ:</b> {len(results)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫(–æ–≤)\n\n"
            
            for i, result in enumerate(results[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                fio = result.get('–§–ò–û', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                position = result.get('–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                department = result.get('–û—Ç–¥–µ–ª', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                phone = result.get('–ù–æ–º–µ—Ä –¢–µ–ª–µ—Ñ–æ–Ω–∞', result.get('–¢–µ–ª–µ—Ñ–æ–Ω', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
                photo = result.get('–§–æ—Ç–æ', '')
                
                text += f"<b>{i}.</b> üë§ <b>{escape_html(str(fio))}</b>\n"
                text += f"üíº {escape_html(str(position))}\n"
                if str(department) != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                    text += f"üè¢ {escape_html(str(department))}\n"
                if str(phone) != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                    text += f"üìû {escape_html(str(phone))}\n"
                if photo and str(photo) != 'nan':
                    text += f"üì∑ <b>–§–æ—Ç–æ:</b> {escape_html(str(photo))}\n"
                text += "\n"
            
            if len(results) > 10:
                text += f"... –∏ –µ—â—ë {len(results) - 10} —Ä–µ–∑—É–ª—å—Ç–∞—Ç(–æ–≤)"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="search_employees"))
            builder.add(types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            builder.adjust(1)
            keyboard = builder.as_markup()
            
            await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –æ—Ç–¥–µ–ª—É: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )


def register_user_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    dp.callback_query.register(
        request_auth_callback,
        lambda c: c.data == "request_auth"
    )
    
    dp.callback_query.register(
        bot_info_callback,
        lambda c: c.data == "bot_info"
    )
    
    dp.message.register(
        process_fio,
        AuthorizeUser.waiting_for_fio
    )
    
    dp.message.register(
        process_position,
        AuthorizeUser.waiting_for_position
    )
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    dp.callback_query.register(
        search_employees_callback,
        lambda c: c.data == "search_employees"
    )
    
    dp.callback_query.register(
        download_contacts_callback,
        lambda c: c.data == "download_contacts"
    )
    
    dp.callback_query.register(
        propose_news_callback,
        lambda c: c.data == "propose_news"
    )
    
    dp.message.register(
        process_news_proposal,
        ProposeNews.waiting_for_news
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞
    dp.callback_query.register(
        search_by_fio_callback,
        lambda c: c.data == "search_by_fio"
    )
    
    dp.callback_query.register(
        search_by_position_callback,
        lambda c: c.data == "search_by_position"
    )
    
    dp.callback_query.register(
        search_by_department_callback,
        lambda c: c.data == "search_by_department"
    )
    
    dp.message.register(
        process_search_fio,
        Search.waiting_for_fio
    )
    
    dp.message.register(
        process_search_position,
        Search.waiting_for_position
    )
    
    dp.message.register(
        process_search_department,
        Search.waiting_for_department
    ) 