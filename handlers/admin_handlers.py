"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
"""

import logging
from datetime import datetime
from aiogram import types, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from config import ADMIN_ID, CHANNEL_CHAT_ID
from database import *
from keyboards import *
from states import DeleteRequest, AddUser, AssignRole, RemoveUser, Notify
from utils import escape_html, admin_required
from services import SyncService, NotificationService

logger = logging.getLogger(__name__)


# ============= –ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê =============

async def admin_panel_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    keyboard = create_admin_panel_keyboard()
    await callback_query.message.edit_text(
        "üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback_query.answer()


# ============= –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò =============

async def view_users_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
        return
    
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç {callback_query.from_user.id}")
        users = await get_authorized_users()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        if not users:
            await callback_query.message.answer("üë• –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            await callback_query.answer()
            return

        text = "üë• <b>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
        for i, user in enumerate(users[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
            try:
                user_id, username, fio, position, role = user
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã
                safe_fio = escape_html(fio)
                safe_username = escape_html(username) if username else '–ù–µ—Ç'
                safe_position = escape_html(position)
                safe_role = escape_html(role) if role else 'user'
                
                text += f"<b>{i}.</b> üë§ <b>{safe_fio}</b>\n"
                text += f"üÜî ID: <code>{user_id}</code>\n"
                text += f"üì± @{safe_username}\n"
                text += f"üíº {safe_position}\n"
                text += f"üëë –†–æ–ª—å: {safe_role}\n\n"
                
            except Exception as user_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {user_error}")
                continue
        
        if len(users) > 20:
            text += f"... –∏ –µ—â—ë {len(users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        await callback_query.message.answer(text, parse_mode=ParseMode.HTML)
        await callback_query.answer(f"–ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)


async def view_requests_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫.", show_alert=True)
        return
    
    try:
        requests = await get_pending_requests()
        
        if not requests:
            await callback_query.message.answer("üìã –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.")
            await callback_query.answer()
            return
        
        text = "üìã <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é:</b>\n\n"
        
        for i, request in enumerate(requests[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            try:
                # auth_requests —Å–æ–¥–µ—Ä–∂–∏—Ç: user_id, username, fio, position, timestamp
                if len(request) >= 4:
                    user_id, username, fio, position = request[:4]
                    timestamp = request[4] if len(request) > 4 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                else:
                    continue
                
                safe_fio = escape_html(fio)
                safe_username = escape_html(username) if username else '–ù–µ—Ç'
                safe_position = escape_html(position)
                
                text += f"<b>{i}. –ó–∞—è–≤–∫–∞</b>\n"
                text += f"üë§ <b>–§–ò–û:</b> {safe_fio}\n"
                text += f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {safe_position}\n"
                text += f"üÜî <b>User ID:</b> <code>{user_id}</code>\n"
                text += f"üì± <b>Username:</b> @{safe_username}\n"
                text += f"üìÖ <b>–î–∞—Ç–∞:</b> {timestamp}\n\n"
                
            except Exception as req_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ {request}: {req_error}")
                continue
        
        if len(requests) > 10:
            text += f"... –∏ –µ—â—ë {len(requests) - 10} –∑–∞—è–≤–æ–∫"
        
        await callback_query.message.answer(text, parse_mode=ParseMode.HTML)
        await callback_query.answer(f"–ù–∞–π–¥–µ–Ω–æ {len(requests)} –∑–∞—è–≤–æ–∫")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞—è–≤–æ–∫: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫.", show_alert=True)


async def assign_role_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π.", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await get_authorized_users()
        
        if not users:
            await callback_query.message.answer("üë• –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            await callback_query.answer()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await show_users_page(callback_query.message, users, 0)
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)


async def show_users_page(message: types.Message, users: list, page: int, users_per_page: int = 7):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π –∏ —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        total_pages = (len(users) + users_per_page - 1) // users_per_page
        start_idx = page * users_per_page
        end_idx = min(start_idx + users_per_page, len(users))
        page_users = users[start_idx:end_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = f"üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        text += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n"
        text += f"üë§ –ü–æ–∫–∞–∑–∞–Ω–æ {len(page_users)} –∏–∑ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        for i, user in enumerate(page_users):
            user_id, username, fio, position, role = user
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã
            safe_fio = escape_html(fio) if fio else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            safe_username = escape_html(username) if username else '–ù–µ—Ç'
            safe_position = escape_html(position) if position else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            safe_role = escape_html(role) if role else 'user'
            
            text += f"<b>{start_idx + i + 1}.</b> üë§ <b>{safe_fio}</b>\n"
            text += f"üÜî ID: <code>{user_id}</code>\n"
            text += f"üì± @{safe_username}\n"
            text += f"üíº {safe_position}\n"
            text += f"üëë –†–æ–ª—å: {safe_role}\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        keyboard = InlineKeyboardBuilder()
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for i, user in enumerate(page_users):
            user_id, username, fio, position, role = user
            user_num = start_idx + i + 1
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keyboard.add(types.InlineKeyboardButton(
                text=f"üë§ {user_num}. {fio[:20]}{'...' if len(fio) > 20 else ''}",
                callback_data=f"select_user_{user_id}"
            ))
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_row = []
        if page > 0:
            nav_row.append(types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"users_page_{page - 1}"
            ))
        if page < total_pages - 1:
            nav_row.append(types.InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=f"users_page_{page + 1}"
            ))
        
        if nav_row:
            keyboard.row(*nav_row)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        keyboard.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
            callback_data="admin_panel"
        ))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        keyboard.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode=ParseMode.HTML)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


# ============= –û–î–û–ë–†–ï–ù–ò–ï/–û–¢–ö–õ–û–ù–ï–ù–ò–ï –ó–ê–Ø–í–û–ö =============

async def approve_user_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ approve_news_
    if callback_query.data.startswith("approve_news_"):
        logger.debug("CALLBACK: approve_news detected, skipping user approval handler")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º user_id –∏–∑ callback_data
        user_id = int(callback_query.data.split("_")[1])
        
        # –û–¥–æ–±—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await approve_user(user_id)
        
        if success:
            await callback_query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω!", show_alert=True)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                from aiogram import Bot
                from config import BOT_TOKEN
                bot = Bot(token=BOT_TOKEN)
                
                await bot.send_message(
                    user_id,
                    "‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n"
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ—Ç! üéâ\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.\n\n"
                    "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
                    parse_mode=ParseMode.HTML
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await log_admin_action(callback_query.from_user.id, f"approved_user_{user_id}")
        else:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏", show_alert=True)


async def decline_user_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º user_id –∏–∑ callback_data
        user_id = int(callback_query.data.split("_")[1])
        
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await decline_user(user_id)
        
        if success:
            await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω!", show_alert=True)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                from aiogram import Bot
                from config import BOT_TOKEN
                bot = Bot(token=BOT_TOKEN)
                
                await bot.send_message(
                    user_id,
                    "‚ùå <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n"
                    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode=ParseMode.HTML
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await log_admin_action(callback_query.from_user.id, f"declined_user_{user_id}")
        else:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏", show_alert=True)


# ============= –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø =============

async def sync_data_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.", show_alert=True)
        return
    
    await callback_query.message.answer("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        sync_service = SyncService()
        result = await sync_service.sync_database()
        
        if result['success']:
            stats = result['stats']
            report = "üîÑ <b>–û—Ç—á–µ—Ç –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            report += f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {stats.get('users_count', 0)} –∑–∞–ø–∏—Å–µ–π\n"
            report += f"‚úÖ –ó–∞—è–≤–∫–∏: {stats.get('requests_count', 0)} –∑–∞–ø–∏—Å–µ–π\n"
            report += f"‚úÖ –ù–æ–≤–æ—Å—Ç–∏: {stats.get('news_count', 0)} –∑–∞–ø–∏—Å–µ–π\n\n"
            report += f"üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        else:
            report = f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:</b>\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        
        await callback_query.message.answer(report, parse_mode=ParseMode.HTML)
        await callback_query.answer("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", show_alert=True)


async def sync_bitrix24_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Bitrix24"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    await callback_query.message.answer("üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Bitrix24...")
    
    try:
        sync_service = SyncService()
        result = await sync_service.sync_with_bitrix24()
        
        if result['success']:
            success_msg = "‚úÖ <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
            success_msg += f"üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            await callback_query.message.answer(success_msg, parse_mode=ParseMode.HTML)
        else:
            error_msg = f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:</b>\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            await callback_query.message.answer(error_msg, parse_mode=ParseMode.HTML)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Bitrix24: {e}")
        await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
    
    await callback_query.answer()


# ============= –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =============

async def send_notification_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.", show_alert=True)
        return
    
    await callback_query.message.answer("üì¢ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", parse_mode=ParseMode.HTML)
    await state.set_state(Notify.waiting_for_notification)
    await callback_query.answer()


async def process_notification_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        from aiogram import Bot
        from config import BOT_TOKEN
        bot = Bot(token=BOT_TOKEN)
        
        notification_service = NotificationService(bot)
        result = await notification_service.send_to_all_users(message.text)
        
        if result['success']:
            await message.answer(
                f"‚úÖ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"   ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result['sent_count']}\n"
                f"   ‚Ä¢ –û—à–∏–±–æ–∫: {result['failed_count']}\n"
                f"   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {result['total_count']}",
                parse_mode=ParseMode.HTML
            )
        else:
            await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", parse_mode=ParseMode.HTML)
        
        await log_admin_action(message.from_user.id, f"sent_notification_to_{result.get('sent_count', 0)}_users")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    
    await state.clear()


def register_admin_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    
    # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    dp.callback_query.register(
        admin_panel_callback,
        lambda c: c.data == "admin_panel"
    )
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    dp.callback_query.register(
        view_users_callback,
        lambda c: c.data == "view_users"
    )
    
    dp.callback_query.register(
        view_requests_callback,
        lambda c: c.data == "view_requests"
    )
    
    dp.callback_query.register(
        assign_role_callback,
        lambda c: c.data == "assign_role"
    )
    
    # –û–¥–æ–±—Ä–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    dp.callback_query.register(
        approve_user_callback,
        lambda c: c.data and c.data.startswith("approve_") and not c.data.startswith("approve_news_")
    )
    
    dp.callback_query.register(
        decline_user_callback,
        lambda c: c.data and c.data.startswith("decline_")
    )
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    dp.callback_query.register(
        sync_data_callback,
        lambda c: c.data == "sync_data"
    )
    
    dp.callback_query.register(
        sync_bitrix24_callback,
        lambda c: c.data == "sync_bitrix24"
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    dp.callback_query.register(
        send_notification_callback,
        lambda c: c.data == "send_notification"
    )
    
    dp.message.register(
        process_notification_text,
        Notify.waiting_for_notification
    ) 