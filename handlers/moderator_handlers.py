"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
"""

import logging
from datetime import datetime
from aiogram import types, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from config import ADMIN_ID, MODERATOR_ID, MARKETER_ID, CHANNEL_CHAT_ID
from database import *
from keyboards import *
from states import Moderator, ScheduleMonth
from utils import escape_html

logger = logging.getLogger(__name__)


# ============= –ü–ê–ù–ï–õ–ò –ú–û–î–ï–†–ê–¢–û–†–ê –ò –ú–ê–†–ö–ï–¢–û–õ–û–ì–ê =============

async def moderator_panel_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–Ω–µ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
    user_id = callback_query.from_user.id
    
    if user_id not in [ADMIN_ID, MODERATOR_ID]:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    keyboard = create_moderator_panel_keyboard()
    await callback_query.message.edit_text(
        "üõ°Ô∏è <b>–ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback_query.answer()


async def marketer_panel_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–Ω–µ–ª–∏ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞"""
    user_id = callback_query.from_user.id
    
    if user_id not in [ADMIN_ID, MODERATOR_ID, MARKETER_ID]:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞.", show_alert=True)
        return
    
    keyboard = create_marketer_keyboard()
    await callback_query.message.edit_text(
        "üì¢ <b>–ü–∞–Ω–µ–ª—å –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback_query.answer()


# ============= –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–°–¢–Ø–ú–ò =============

async def publish_news_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏"""
    user_id = callback_query.from_user.id
    
    if user_id not in [ADMIN_ID, MODERATOR_ID, MARKETER_ID]:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.", show_alert=True)
        return
    
    await callback_query.message.answer(
        "üì¢ <b>–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ:",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(Moderator.waiting_for_news)
    await callback_query.answer()


async def process_moderator_news(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        # –ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª
        from aiogram import Bot
        from config import BOT_TOKEN
        bot = Bot(token=BOT_TOKEN)
        
        await bot.send_message(
            CHANNEL_CHAT_ID, 
            f"üì¢ <b>–ù–æ–≤–æ—Å—Ç—å –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{message.text}", 
            parse_mode=ParseMode.HTML
        )
        
        await message.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ!")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await log_admin_action(message.from_user.id, f"published_news")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.")
    
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from handlers.common_handlers import send_main_menu
    await send_main_menu(message, user_id=message.from_user.id)


async def news_proposals_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π"""
    user_id = callback_query.from_user.id
    
    if user_id not in [ADMIN_ID, MODERATOR_ID, MARKETER_ID]:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.", show_alert=True)
        return
    
    try:
        proposals = await get_news_proposals()
        
        if not proposals:
            await callback_query.message.answer("üìã –ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π.")
            await callback_query.answer()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        text = "üìã <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π:</b>\n\n"
        
        for i, proposal in enumerate(proposals[:5], 1):
            proposal_id, author, text_content, created_at, status = proposal
            
            safe_author = escape_html(author)
            safe_text = escape_html(text_content[:100])
            
            status_emoji = "‚è≥" if status == "pending" else "‚úÖ" if status == "approved" else "‚ùå"
            
            text += f"<b>{i}. #{proposal_id}</b> {status_emoji}\n"
            text += f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {safe_author}\n"
            text += f"üìù <b>–¢–µ–∫—Å—Ç:</b> {safe_text}{'...' if len(text_content) > 100 else ''}\n"
            text += f"üìÖ <b>–î–∞—Ç–∞:</b> {created_at}\n"
            text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
        
        if len(proposals) > 5:
            text += f"... –∏ –µ—â—ë {len(proposals) - 5} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        keyboard = create_news_proposals_keyboard(proposals[:5])
        
        await callback_query.message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.", show_alert=True)


async def approve_news_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
    user_id = callback_query.from_user.id
    
    if user_id not in [ADMIN_ID, MODERATOR_ID, MARKETER_ID]:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π.", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º proposal_id –∏–∑ callback_data
        parts = callback_query.data.split("_")
        if len(parts) < 3:
            await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data", show_alert=True)
            return
        
        proposal_id = int(parts[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        proposal = await get_news_proposal_by_id(proposal_id)
        
        if not proposal:
            await callback_query.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        proposal_id, author_id, text_content, author_name, created_at, status = proposal
        
        if status != "pending":
            await callback_query.answer(f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (—Å—Ç–∞—Ç—É—Å: {status})", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "approved"
        await update_news_proposal_status(proposal_id, "approved")
        
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
        try:
            from aiogram import Bot
            from config import BOT_TOKEN
            bot = Bot(token=BOT_TOKEN)
            
            await bot.send_message(
                CHANNEL_CHAT_ID,
                f"üì¢ <b>–ù–æ–≤–æ—Å—Ç—å</b>\n\n{text_content}\n\n"
                f"<i>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ: {escape_html(author_name)}</i>",
                parse_mode=ParseMode.HTML
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
            try:
                await bot.send_message(
                    author_id,
                    f"‚úÖ <b>–í–∞—à–∞ –Ω–æ–≤–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!</b>\n\n"
                    f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{escape_html(text_content[:200])}{'...' if len(text_content) > 200 else ''}\n\n"
                    f"üìÖ <b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                    parse_mode=ParseMode.HTML
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞ {author_id}: {e}")
            
            await callback_query.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!", show_alert=True)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await log_admin_action(user_id, f"approved_news_{proposal_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª", show_alert=True)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏", show_alert=True)


async def reject_news_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
    user_id = callback_query.from_user.id
    
    if user_id not in [ADMIN_ID, MODERATOR_ID, MARKETER_ID]:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π.", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º proposal_id –∏–∑ callback_data
        parts = callback_query.data.split("_")
        if len(parts) < 3:
            await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data", show_alert=True)
            return
        
        proposal_id = int(parts[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        proposal = await get_news_proposal_by_id(proposal_id)
        
        if not proposal:
            await callback_query.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        proposal_id, author_id, text_content, author_name, created_at, status = proposal
        
        if status != "pending":
            await callback_query.answer(f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (—Å—Ç–∞—Ç—É—Å: {status})", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "rejected"
        await update_news_proposal_status(proposal_id, "rejected")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
        try:
            from aiogram import Bot
            from config import BOT_TOKEN
            bot = Bot(token=BOT_TOKEN)
            
            await bot.send_message(
                author_id,
                f"‚ùå <b>–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n\n"
                f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{escape_html(text_content[:200])}{'...' if len(text_content) > 200 else ''}\n\n"
                f"üìÖ <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–æ:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥—É—é –Ω–æ–≤–æ—Å—Ç—å.",
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞ {author_id}: {e}")
        
        await callback_query.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ", show_alert=True)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await log_admin_action(user_id, f"rejected_news_{proposal_id}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏", show_alert=True)


# ============= –ì–†–ê–§–ò–ö –ö–û–§–ï =============

async def coffee_schedule_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ"""
    try:
        schedule = await get_coffee_schedule()
        
        if not schedule:
            await callback_query.message.answer("üìÖ –ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ñ–µ –ø—É—Å—Ç.")
            await callback_query.answer()
            return
        
        text = "‚òï <b>–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ñ–µ:</b>\n\n"
        
        for i, entry in enumerate(schedule[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            entry_id, fio, date, user_id, created_by, created_at = entry
            
            safe_fio = escape_html(fio)
            
            text += f"<b>{i}.</b> üìÖ <b>{date}</b>\n"
            text += f"üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> {safe_fio}\n"
            text += f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b> {created_at}\n\n"
        
        if len(schedule) > 10:
            text += f"... –∏ –µ—â—ë {len(schedule) - 10} –∑–∞–ø–∏—Å–µ–π"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–º
        keyboard = create_schedule_keyboard([entry[2] for entry in schedule[:5]])
        
        await callback_query.message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞.", show_alert=True)


async def schedule_month_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –º–µ—Å—è—Ü"""
    user_id = callback_query.from_user.id
    
    if user_id not in [ADMIN_ID, MODERATOR_ID]:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–º.", show_alert=True)
        return
    
    await callback_query.message.answer(
        "üìÖ <b>–ì—Ä–∞—Ñ–∏–∫ –Ω–∞ –º–µ—Å—è—Ü</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–§–ò–û: –î–î.–ú–ú.–ì–ì–ì–ì</code>\n"
        "<code>–§–ò–û: –î–î.–ú–ú.–ì–ì–ì–ì</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>–ò–≤–∞–Ω–æ–≤ –ò.–ò.: 01.02.2025</code>\n"
        "<code>–ü–µ—Ç—Ä–æ–≤ –ü.–ü.: 02.02.2025</code>",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(ScheduleMonth.waiting_for_schedule)
    await callback_query.answer()


async def process_schedule_month(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –º–µ—Å—è—Ü"""
    lines = message.text.strip().split('\n')
    entries = []
    errors = []
    
    for line in lines:
        if not line.strip():
            continue
        
        if ':' not in line:
            errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: {line}")
            continue
        
        fio_part, date_part = line.split(':', 1)
        fio = fio_part.strip()
        date_str = date_part.strip()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            date_obj = datetime.strptime(date_str, "%d.%m.%Y")
            entries.append((fio, date_str))
        except Exception:
            errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str} (–æ–∂–∏–¥–∞–µ—Ç—Å—è –î–î.–ú–ú.–ì–ì–ì–ì)")
    
    if entries:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω–æ
        for fio, date_str in entries:
            await add_coffee_schedule_entry(fio, date_str, message.from_user.id)
        
        await message.answer(
            f"‚úÖ <b>–ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!</b>\n\n"
            f"üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:</b> {len(entries)}",
            parse_mode=ParseMode.HTML
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await log_admin_action(message.from_user.id, f"added_coffee_schedule_{len(entries)}_entries")
    
    if errors:
        error_text = "‚ùå <b>–û—à–∏–±–∫–∏:</b>\n\n" + "\n".join(errors)
        await message.answer(error_text, parse_mode=ParseMode.HTML)
    
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from handlers.common_handlers import send_main_menu
    await send_main_menu(message, user_id=message.from_user.id)


def register_moderator_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    
    # –ü–∞–Ω–µ–ª–∏
    dp.callback_query.register(
        moderator_panel_callback,
        lambda c: c.data == "moderator_panel"
    )
    
    dp.callback_query.register(
        marketer_panel_callback,
        lambda c: c.data == "marketer_panel"
    )
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏
    dp.callback_query.register(
        publish_news_callback,
        lambda c: c.data == "publish_news"
    )
    
    dp.message.register(
        process_moderator_news,
        Moderator.waiting_for_news
    )
    
    dp.callback_query.register(
        news_proposals_callback,
        lambda c: c.data == "news_proposals"
    )
    
    dp.callback_query.register(
        approve_news_callback,
        lambda c: c.data and c.data.startswith("approve_news_")
    )
    
    dp.callback_query.register(
        reject_news_callback,
        lambda c: c.data and c.data.startswith("reject_news_")
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ñ–µ
    dp.callback_query.register(
        coffee_schedule_callback,
        lambda c: c.data == "coffee_schedule"
    )
    
    dp.callback_query.register(
        schedule_month_callback,
        lambda c: c.data == "schedule_month"
    )
    
    dp.message.register(
        process_schedule_month,
        ScheduleMonth.waiting_for_schedule
    ) 