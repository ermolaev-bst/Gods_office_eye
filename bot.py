import asyncio
import logging
import sqlite3
import pandas as pd
import os
import json
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import aiofiles
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
import aiohttp
from config import *
from database import Database
from inline_keyboards import BeautifulInlineKeyboards
from bitrix24_sync import sync_bitrix24_to_excel, get_sync_status

# –ò–º–ø–æ—Ä—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (Flask)
from moderator_web import run_flask

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)
logger.info('=== BOT_OFFICE/BOT.PY STARTED ===')



def escape_html(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML-—Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ"""
    if text is None:
        return '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    
    text_str = str(text)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if any(char in text_str for char in ['<', '>', '&']):
        logger.warning(f"–ù–∞–π–¥–µ–Ω—ã HTML-—Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ: {repr(text_str)}")
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã
    escaped = text_str.replace('<', '&lt;').replace('>', '&gt;').replace('&', '&amp;')
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    escaped = escaped.replace('"', '&quot;').replace("'", '&#39;')
    
    return escaped



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
data_manager = DataManager(EXCEL_FILE)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AuthRequest(StatesGroup):
    waiting_for_fio = State()
    waiting_for_position = State()

class Search(StatesGroup):
    waiting_for_fio = State()
    waiting_for_position = State()
    waiting_for_department = State()
    waiting_for_phone = State()

class RemoveUser(StatesGroup):
    waiting_for_user_id = State()

class Moderator(StatesGroup):
    waiting_for_news = State()

class AssignRole(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_role = State()

class Notify(StatesGroup):
    waiting_for_notification = State()

class ScheduleMonth(StatesGroup):
    waiting_for_schedule = State()

class CoffeeSchedule(StatesGroup):
    waiting_for_schedule = State()

class ChannelSubscribe(StatesGroup):
    waiting_for_fio = State()

class NewsProposal(StatesGroup):
    waiting_for_text = State()
    waiting_for_photos = State()

class EditNewsProposal(StatesGroup):
    waiting_for_text = State()
    waiting_for_photos = State()

class CommentNews(StatesGroup):
    waiting_for_comment = State()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def send_main_menu(message, user_id=None):
    if user_id is None:
        user_id = message.from_user.id
    
    is_auth = await is_authorized(user_id)
    if is_auth:
        role = await get_user_role(user_id)
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = BeautifulInlineKeyboards.create_user_functions_keyboard()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if role in ['admin', 'moderator']:
            keyboard.inline_keyboard.append([InlineKeyboardButton(text="üõ°Ô∏è –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="moderator_panel")])
        if role == 'admin':
            keyboard.inline_keyboard.append([InlineKeyboardButton(text="üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
        if role == 'marketer':
            keyboard.inline_keyboard.append([InlineKeyboardButton(text="üì¢ –ü–∞–Ω–µ–ª—å –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞", callback_data="marketer_panel")])
        
        welcome_text = f"üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ—Ç\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à–∞ —Ä–æ–ª—å: {role.capitalize()}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await message.answer(welcome_text, reply_markup=keyboard)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="üîê –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é", callback_data="request_auth"))
        keyboard.add(InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", callback_data="channel_subscribe"))
        keyboard.add(InlineKeyboardButton(text="üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ", callback_data="bot_info"))
        keyboard.add(InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç callback", callback_data="test_callback"))
        keyboard.adjust(1, 1, 1, 1)
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ—Ç!\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.",
            reply_markup=keyboard.as_markup()
        )

def format_employee_caption(row):
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä
    short_number = format_short_number(getattr(row, '–ö–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä', ''))
    # –ü–æ–∏—Å–∫ email –ø–æ —Ä–∞–∑–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
    email = None
    for key in ['Email', 'E-mail', 'email', '–ü–æ—á—Ç–∞']:
        if hasattr(row, key):
            email = getattr(row, key)
            if pd.notna(email) and str(email).strip():
                break
    if not email or str(email).strip().lower() in ('nan', 'none', ''):
        email = '–ù/–î'
    caption = (
        f"üë§ <b>{getattr(row, '–§–ò–û', '–ù/–î')}</b>\n"
        f"üè¢ <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {getattr(row, '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–ù/–î')}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {getattr(row, '–¢–µ–ª–µ—Ñ–æ–Ω', '–ù/–î')}\n"
        f"üì± <b>–ö–æ—Ä–æ—Ç–∫–∏–π:</b> {short_number}\n"
        f"üè¢ <b>–û—Ç–¥–µ–ª:</b> {getattr(row, '–û—Ç–¥–µ–ª', '–ù/–î')}\n"
        f"üìß <b>Email:</b> {email}"
    )
    return caption

def format_short_number(value):
    if pd.isna(value) or value == '':
        return '–ù/–î'
    # –ï—Å–ª–∏ float –∏ —Ü–µ–ª–æ–µ, –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ int
    try:
        fval = float(value)
        if fval.is_integer():
            return str(int(fval))
        return str(fval)
    except Exception:
        return str(value)

def require_roles(*roles):
    def decorator(func):
        async def wrapper(message: types.Message, *args, **kwargs):
            user_id = message.from_user.id
            if not await is_authorized(user_id):
                await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")
                return
            user_role = await get_user_role(user_id)
            if user_role not in roles:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
                return
            return await func(message, *args, **kwargs)
        return wrapper
    return decorator

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def send_welcome(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logger.info(f"[MENU] user_id={message.from_user.id}, state_before_clear={current_state}")
    await state.clear()
    logger.info(f"[MENU] user_id={message.from_user.id}, state_after_clear={await state.get_state()}")
    await send_main_menu(message)

def normalize_fio(fio: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –§–ò–û: –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, –∑–∞–º–µ–Ω—è–µ—Ç —ë –Ω–∞ –µ, —É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã"""
    return fio.lower().replace('—ë', '–µ').replace('–Å', '–ï').strip()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –§–ò–û –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª)
@dp.message(ChannelSubscribe.waiting_for_fio)
async def handle_fio_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –§–ò–û –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        fio = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –§–ò–û –¥–ª—è –∫–∞–Ω–∞–ª–∞
        current_state = await state.get_state()
        current_data = await state.get_data()
        logger.info(f"[CHANNEL_FIO] user_id={user_id}, state={current_state}, data={current_data}, text={fio}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ pending_channel_request
        data = await state.get_data()
        is_pending_request = data.get('pending_channel_request', False)
        if not is_pending_request:
            logger.warning(f"[CHANNEL_FIO] No pending_channel_request flag for user_id={user_id}")
            await state.clear()
            return
        
        if not fio or len(fio) < 3:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ).\n"
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 3 —Å–∏–º–≤–æ–ª–∞.",
                parse_mode=ParseMode.HTML
            )
            return
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –§–ò–û –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–∞–Ω–∞–ª–∞: user_id={user_id}, fio={fio}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å—á–∏–∫ —Å —Ç–∞–∫–∏–º –§–ò–û
        if await is_fio_already_subscribed(fio):
            existing_subscriber = await get_subscriber_by_fio(fio)
            if existing_subscriber:
                existing_user_id = existing_subscriber[0]
                logger.warning(f"–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ò–û: {fio} —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∫–∞–∫ user_id={existing_user_id}, –Ω–æ–≤—ã–π user_id={user_id}")
                await message.answer(
                    f"‚ùå <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
                    f"üë§ <b>–§–ò–û:</b> {fio}\n\n"
                    f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –§–ò–û —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª.\n\n"
                    f"–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode=ParseMode.HTML
                )
                admin_message = (
                    f"‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ò–û)</b>\n\n"
                    f"üë§ <b>–§–ò–û:</b> {fio}\n"
                    f"üÜî <b>–ù–æ–≤—ã–π ID:</b> {user_id}\n"
                    f"üë§ <b>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID:</b> {existing_user_id}\n"
                    f"üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"‚ùå <b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–∫–ª–æ–Ω–µ–Ω–∞ (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ò–û)"
                )
                await bot.send_message(ADMIN_ID, admin_message, parse_mode=ParseMode.HTML)
                await state.clear()
                await send_main_menu(message, user_id=user_id)
                return
        
        import pandas as pd
        import os
        if not CHANNEL_USERS_EXCEL or not os.path.exists(CHANNEL_USERS_EXCEL):
            logger.warning("Excel —Ñ–∞–π–ª –∫–∞–Ω–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            await message.answer(
                f"‚ùå <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
                f"üë§ <b>–§–ò–û:</b> {fio}\n\n"
                f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode=ParseMode.HTML
            )
            await state.clear()
            await send_main_menu(message, user_id=user_id)
            return
        try:
            df = pd.read_excel(CHANNEL_USERS_EXCEL)
            logger.info(f"Channel Excel loaded: {len(df)} rows for FIO check")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞ –∫–∞–Ω–∞–ª–∞: {e}")
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ –§–ò–û.\n\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode=ParseMode.HTML
            )
            await state.clear()
            await send_main_menu(message, user_id=user_id)
            return
        fio_column = None
        for col in df.columns:
            if '—Ñ–∏–æ' in col.lower():
                fio_column = col
                break
        if fio_column is None:
            fio_column = df.columns[0]
            logger.warning(f"–ö–æ–ª–æ–Ω–∫–∞ —Å –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º: {fio_column}")
        user_found = False
        user_fio_norm = normalize_fio(fio)
        for idx, row in df.iterrows():
            excel_fio = str(row[fio_column]).strip()
            if normalize_fio(excel_fio) == user_fio_norm:
                user_found = True
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ Excel: {fio} (—Å—Ç—Ä–æ–∫–∞ {idx + 1})")
                break
        if user_found:
            await add_channel_subscriber(user_id, username, fio)
            await message.answer(
                f"‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n"
                f"üë§ <b>–§–ò–û:</b> {fio}\n"
                f"üÜî <b>ID:</b> {user_id}\n"
                f"üë§ <b>Username:</b> @{username or '–ù–µ—Ç'}\n\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª!",
                parse_mode=ParseMode.HTML
            )
            admin_message = (
                f"‚úÖ <b>–û–¥–æ–±—Ä–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª</b>\n\n"
                f"üë§ <b>–§–ò–û:</b> {fio}\n"
                f"üÜî <b>ID:</b> {user_id}\n"
                f"üë§ <b>Username:</b> @{username or '–ù–µ—Ç'}\n"
                f"üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∞ (–Ω–∞–π–¥–µ–Ω –≤ Excel)"
            )
            await bot.send_message(ADMIN_ID, admin_message, parse_mode=ParseMode.HTML)
            logger.info(f"Channel join request approved: user_id={user_id}, fio={fio}")
        else:
            await message.answer(
                f"‚ùå <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
                f"üë§ <b>–§–ò–û:</b> {fio}\n"
                f"üÜî <b>ID:</b> {user_id}\n\n"
                f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> –í–∞—à–µ –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
                f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode=ParseMode.HTML
            )
            admin_message = (
                f"‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª</b>\n\n"
                f"üë§ <b>–§–ò–û:</b> {fio}\n"
                f"üÜî <b>ID:</b> {user_id}\n"
                f"üë§ <b>Username:</b> @{username or '–ù–µ—Ç'}\n"
                f"üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"‚ùå <b>–°—Ç–∞—Ç—É—Å:</b> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ (–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Excel)"
            )
            await bot.send_message(ADMIN_ID, admin_message, parse_mode=ParseMode.HTML)
            logger.info(f"Channel join request rejected: user_id={user_id}, fio={fio}")
        
        await state.clear()
        await send_main_menu(message, user_id=user_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –§–ò–û –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –§–ò–û. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        await send_main_menu(message, user_id=message.from_user.id)

@dp.message(Command("channel_subscribe"))
async def channel_subscribe_command(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
    await state.set_state(Search.waiting_for_fio)

@dp.message(Command("menu"))
async def show_menu(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logger.info(f"[MENU] user_id={message.from_user.id}, state_before_clear={current_state}")
    await state.clear()
    logger.info(f"[MENU] user_id={message.from_user.id}, state_after_clear={await state.get_state()}")
    await send_main_menu(message)

@dp.message(F.text.lower().in_(["–º–µ–Ω—é", "menu", "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–≥–ª–∞–≤–Ω–∞—è"]))
async def show_menu_text(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logger.info(f"[MENU] user_id={message.from_user.id}, state_before_clear={current_state}")
    await state.clear()
    logger.info(f"[MENU] user_id={message.from_user.id}, state_after_clear={await state.get_state()}")
    await send_main_menu(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
@dp.callback_query(lambda c: c.data == "test_callback")
async def test_callback(callback_query: types.CallbackQuery):
    await callback_query.answer("–¢–µ—Å—Ç–æ–≤—ã–π callback —Ä–∞–±–æ—Ç–∞–µ—Ç!", show_alert=True)

@dp.callback_query(lambda c: c.data == "request_auth")
async def request_auth_callback(callback_query: types.CallbackQuery, state: FSMContext):
    is_auth = await is_authorized(callback_query.from_user.id)
    
    if is_auth:
        await callback_query.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", show_alert=True)
        await send_main_menu(callback_query.message, user_id=callback_query.from_user.id)
        return
    
    await callback_query.answer()
    await callback_query.message.answer(
        "üëã <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º –±–æ—Ç–µ</b>\n\n"
        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(AuthRequest.waiting_for_fio)

@dp.callback_query(lambda c: c.data == "bot_info")
async def bot_info_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(
        "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n\n"
        "ü§ñ <b>–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ—Ç</b>\n"
        "üìã <b>–§—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏\n"
        "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ñ–µ\n"
        "‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n\n"
        "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.",
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(lambda c: c.data == "channel_subscribe")
async def channel_subscribe_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
    await state.set_state(Search.waiting_for_fio)

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main_callback(callback_query: types.CallbackQuery):
    await send_main_menu(callback_query.message, user_id=callback_query.from_user.id)



@dp.callback_query(lambda c: c.data == "moderator_panel")
async def moderator_panel_callback(callback_query: types.CallbackQuery):
    keyboard = BeautifulInlineKeyboards.create_moderator_panel_keyboard()
    await callback_query.message.edit_text(
        "üõ°Ô∏è –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "marketer_panel")
async def marketer_panel_callback(callback_query: types.CallbackQuery):
    keyboard = BeautifulInlineKeyboards.create_marketer_keyboard()
    await callback_query.message.edit_text(
        "üì¢ –ü–∞–Ω–µ–ª—å –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "admin_panel")
async def admin_panel_callback(callback_query: types.CallbackQuery):
    keyboard = BeautifulInlineKeyboards.create_admin_panel_keyboard()
    await callback_query.message.edit_text(
        "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
@dp.callback_query(lambda c: c.data and c.data.startswith("approve_news_"))
async def approve_news_callback(callback_query: types.CallbackQuery):
    logger.debug(f"DEBUG_CALLBACK: approve_news received from user {callback_query.from_user.id}")
    logger.debug(f"DEBUG_CALLBACK: callback_data='{callback_query.data}'")
    print(f"DEBUG: approve_news callback received: {callback_query.data}")
    
    logger.debug(f"CALLBACK: approve_news from user {callback_query.from_user.id}")
    logger.debug(f"CALLBACK: approve_news callback_data={callback_query.data}")
    print("approve_news_callback called!", callback_query.data)
    await callback_query.answer("approve_news_callback!", show_alert=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback_data –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    parts = callback_query.data.split("_")
    if len(parts) < 3:
        logger.error(f"CALLBACK: Invalid callback_data format: {callback_query.data}")
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data", show_alert=True)
        return
    
    try:
        proposal_id = int(parts[2])
        if proposal_id <= 0:
            logger.error(f"CALLBACK: Invalid proposal_id: {proposal_id}")
            await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", show_alert=True)
            return
    except ValueError as e:
        logger.error(f"CALLBACK: Error parsing proposal_id from {parts[2]}: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", show_alert=True)
        return
    
    logger.info(f"[approve_news_callback] called for proposal_id={proposal_id}, by user_id={callback_query.from_user.id}")
    import traceback
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        proposal = await get_news_proposal_by_id(proposal_id)
        logger.info(f"[approve_news_callback] proposal from DB: {proposal}")
        if not proposal:
            logger.warning(f"[approve_news_callback] proposal_id={proposal_id} not found!")
            await callback_query.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        proposal_id, user_id, username, fio, news_text, photos_json, status, marketer_id, comment, created_at, processed_at = proposal
        logger.info(f"[approve_news_callback] status={status}, user_id={user_id}, fio={fio}, marketer_id={marketer_id}")
        if status != 'pending':
            logger.warning(f"[approve_news_callback] proposal_id={proposal_id} already processed (status={status})")
            await callback_query.answer("–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await update_news_proposal_status(proposal_id, 'approved', callback_query.from_user.id, "–û–¥–æ–±—Ä–µ–Ω–æ")
        logger.info(f"[approve_news_callback] status updated in DB for proposal_id={proposal_id}")
        
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
        import json
        photos = json.loads(photos_json) if photos_json else []
        logger.info(f"[approve_news_callback] CHANNEL_CHAT_ID={CHANNEL_CHAT_ID}, photos_count={len(photos)}")
        
        try:
            if photos:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
                media_group = []
                for i, photo_id in enumerate(photos):
                    if i == 0:
                        media_group.append(types.InputMediaPhoto(
                            media=photo_id,
                            caption=f"ÔøΩÔøΩ <b>–ù–æ–≤–æ—Å—Ç—å –æ—Ç {fio}</b>\n\n{news_text}" if i == 0 else None,
                            parse_mode=ParseMode.HTML
                        ))
                    else:
                        media_group.append(types.InputMediaPhoto(media=photo_id))
                logger.info(f"[approve_news_callback] Sending media_group to channel {CHANNEL_CHAT_ID}")
                await bot.send_media_group(CHANNEL_CHAT_ID, media_group)
            else:
                logger.info(f"[approve_news_callback] Sending text message to channel {CHANNEL_CHAT_ID}")
                await bot.send_message(
                    CHANNEL_CHAT_ID,
                    f"ÔøΩÔøΩ <b>–ù–æ–≤–æ—Å—Ç—å –æ—Ç {fio}</b>\n\n{news_text}",
                    parse_mode=ParseMode.HTML
                )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
            logger.info(f"[approve_news_callback] Notifying author user_id={user_id}")
            await bot.send_message(
                user_id,
                f"‚úÖ –í–∞—à–∞ –Ω–æ–≤–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ!"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞
            logger.info(f"[approve_news_callback] Editing message for marketer (proposal_id={proposal_id})")
            await callback_query.message.edit_text(
                f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{proposal_id} –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.",
                reply_markup=None
            )
            await callback_query.answer("–ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ!", show_alert=True)
            logger.info(f"[approve_news_callback] Success for proposal_id={proposal_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª: {e}\n{traceback.format_exc()}")
            await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏!", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}\n{traceback.format_exc()}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.")

@dp.callback_query(lambda c: c.data and c.data.startswith("reject_news_"))
async def reject_news_callback(callback_query: types.CallbackQuery):
    logger.debug(f"DEBUG_CALLBACK: reject_news received from user {callback_query.from_user.id}")
    logger.debug(f"DEBUG_CALLBACK: callback_data='{callback_query.data}'")
    print(f"DEBUG: reject_news callback received: {callback_query.data}")
    
    logger.debug(f"CALLBACK: reject_news from user {callback_query.from_user.id}")
    proposal_id = int(callback_query.data.split("_")[-1])
    logger.info(f"[reject_news_callback] called for proposal_id={proposal_id}, by user_id={callback_query.from_user.id}")
    
    try:
        proposal = await get_news_proposal_by_id(proposal_id)
        if not proposal:
            await callback_query.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        proposal_id, user_id, username, fio, news_text, photos_json, status, marketer_id, comment, created_at, processed_at = proposal
        if status != 'pending':
            await callback_query.answer("–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
            return
        
        await update_news_proposal_status(proposal_id, 'rejected', callback_query.from_user.id, "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        
        # –£–≤–µ–¥–æ–º–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏)
        try:
            await bot.send_message(user_id, "‚ùå –í–∞—à–∞ –Ω–æ–≤–æ—Å—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–æ–º.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        await callback_query.message.edit_text(f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{proposal_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.", reply_markup=None)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.callback_query(lambda c: c.data and c.data.startswith("approve_"))
async def process_approve(callback_query: types.CallbackQuery):
    logger.debug(f"DEBUG_CALLBACK: approve received from user {callback_query.from_user.id}")
    logger.debug(f"DEBUG_CALLBACK: callback_data='{callback_query.data}'")
    print(f"DEBUG: approve callback received: {callback_query.data}")
    
    parts = callback_query.data.split("_")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ approve_news_
    if len(parts) >= 2 and parts[1] == "news":
        logger.debug(f"CALLBACK: approve_news detected, skipping user approval handler for {callback_query.data}")
        # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º approve_news_... —ç—Ç–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
        return

    if len(parts) == 2 and parts[1].isdigit():
        user_id = int(parts[1])
        logger.debug(f"CALLBACK: approve user {user_id} by admin {callback_query.from_user.id}")
        
        try:
            # –û–¥–æ–±—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await approve_user(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            try:
                await send_main_menu(types.Message(
                    message_id=0,
                    date=datetime.now(),
                    chat=types.Chat(id=user_id, type="private"),
                    from_user=types.User(id=user_id, is_bot=False, first_name="User")
                ), user_id=user_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await callback_query.message.edit_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–¥–æ–±—Ä–µ–Ω.",
                reply_markup=None
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await log_admin_action(callback_query.from_user.id, f"–û–¥–æ–±—Ä–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã approve_
        return

@dp.callback_query(lambda c: c.data and c.data.startswith("decline_"))
async def process_decline(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split("_")[1])
    logger.debug(f"CALLBACK: decline user {user_id} by admin {callback_query.from_user.id}")
    
    try:
        # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await remove_user(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await callback_query.message.edit_text(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.",
            reply_markup=None
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await log_admin_action(callback_query.from_user.id, f"–û—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@dp.message(AuthRequest.waiting_for_fio)
async def process_fio(message: types.Message, state: FSMContext):
    fio = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –§–ò–û
    if not fio or len(fio) < 3:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ).\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 3 —Å–∏–º–≤–æ–ª–∞.",
            parse_mode=ParseMode.HTML
        )
        return
    
    await state.update_data(fio=fio)
    await message.answer(
        "‚úÖ <b>–§–ò–û –ø—Ä–∏–Ω—è—Ç–æ!</b>\n\n"
        f"üë§ <b>–í–∞—à–µ –§–ò–û:</b> {fio}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(AuthRequest.waiting_for_position)

@dp.message(AuthRequest.waiting_for_position)
async def process_position(message: types.Message, state: FSMContext):
    data = await state.get_data()
    fio = data.get('fio')
    position = message.text.strip()
    
    if not position or len(position) < 2:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å.\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 2 —Å–∏–º–≤–æ–ª–∞.",
            parse_mode=ParseMode.HTML
        )
        return
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: user_id={message.from_user.id}, fio={fio}, position={position}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –§–ò–û –≤ Excel —Ñ–∞–π–ª–µ –∫–∞–Ω–∞–ª–∞
    import pandas as pd
    import os
    
    user_found_in_excel = False
    
    if CHANNEL_USERS_EXCEL and os.path.exists(CHANNEL_USERS_EXCEL):
        try:
            df = pd.read_excel(CHANNEL_USERS_EXCEL)
            logger.info(f"Excel —Ñ–∞–π–ª –∫–∞–Ω–∞–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω: {len(df)} —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            
            # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –§–ò–û
            fio_column = None
            for col in df.columns:
                if '—Ñ–∏–æ' in col.lower():
                    fio_column = col
                    break
            
            if fio_column is None:
                fio_column = df.columns[0]
                logger.warning(f"–ö–æ–ª–æ–Ω–∫–∞ —Å –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º: {fio_column}")
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Excel
            user_fio_norm = normalize_fio(fio)
            for idx, row in df.iterrows():
                excel_fio = str(row[fio_column]).strip()
                if normalize_fio(excel_fio) == user_fio_norm:
                    user_found_in_excel = True
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ Excel –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {fio} (—Å—Ç—Ä–æ–∫–∞ {idx + 1})")
                    break
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
    
    if user_found_in_excel:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ Excel - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ–º
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
            await approve_user(message.from_user.id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            await add_auth_request(message.from_user.id, message.from_user.username, fio, position)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.answer(
                f"‚úÖ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!</b>\n\n"
                f"üë§ <b>–§–ò–û:</b> {fio}\n"
                f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {position}\n"
                f"üÜî <b>ID:</b> {message.from_user.id}\n\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ—Ç!",
                parse_mode=ParseMode.HTML
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await send_main_menu(message)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_message = (
                f"‚úÖ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>\n\n"
                f"üë§ <b>–§–ò–û:</b> {fio}\n"
                f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {position}\n"
                f"üÜî <b>ID:</b> {message.from_user.id}\n"
                f"üë§ <b>Username:</b> @{message.from_user.username or '–ù–µ—Ç'}\n"
                f"üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∞ (–Ω–∞–π–¥–µ–Ω –≤ Excel –∫–∞–Ω–∞–ª–∞)"
            )
            
            await bot.send_message(ADMIN_ID, admin_message, parse_mode=ParseMode.HTML)
            logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∞: user_id={message.from_user.id}, fio={fio}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Excel - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await add_auth_request(message.from_user.id, message.from_user.username, fio, position)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.answer(
                f"‚è≥ <b>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ</b>\n\n"
                f"üë§ <b>–§–ò–û:</b> {fio}\n"
                f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {position}\n"
                f"üÜî <b>ID:</b> {message.from_user.id}\n\n"
                f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
                parse_mode=ParseMode.HTML
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_message = (
                f"üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é</b>\n\n"
                f"üë§ <b>–§–ò–û:</b> {fio}\n"
                f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {position}\n"
                f"üÜî <b>ID:</b> {message.from_user.id}\n"
                f"üë§ <b>Username:</b> @{message.from_user.username or '–ù–µ—Ç'}\n"
                f"üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"‚ùå <b>–°—Ç–∞—Ç—É—Å:</b> –ù–µ –Ω–∞–π–¥–µ–Ω –≤ Excel –∫–∞–Ω–∞–ª–∞ - —Ç—Ä–µ–±—É–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è"
            )
            
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{message.from_user.id}"))
            keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{message.from_user.id}"))
            keyboard.adjust(2)
            
            await bot.send_message(ADMIN_ID, admin_message, reply_markup=keyboard.as_markup(), parse_mode=ParseMode.HTML)
            logger.info(f"–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: user_id={message.from_user.id}, fio={fio}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(lambda c: c.data == "search_employees")
async def search_employees_callback(callback_query: types.CallbackQuery):
    keyboard = BeautifulInlineKeyboards.create_search_keyboard()
    await callback_query.message.edit_text(
        "üîç –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "search_employee")
async def search_employee_callback(callback_query: types.CallbackQuery):
    keyboard = BeautifulInlineKeyboards.create_search_keyboard()
    await callback_query.message.edit_text(
        "üîç –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
        reply_markup=keyboard
    )



@dp.callback_query(lambda c: c.data == "coffee_schedule")
async def coffee_schedule_callback(callback_query: types.CallbackQuery):
    try:
        user_role = await get_user_role(callback_query.from_user.id)
        
        # –ï—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–º
        if user_role == "moderator":
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üìù –°–æ—Å—Ç–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="create_coffee_schedule")
            keyboard.button(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="view_coffee_schedule")
            keyboard.button(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="clear_coffee_schedule")
            keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="moderator_panel")
            keyboard.adjust(1)
            
            await callback_query.message.edit_text(
                "‚òï <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–º –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard.as_markup(),
                parse_mode=ParseMode.HTML
            )
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –≥—Ä–∞—Ñ–∏–∫
            user_info = await get_user_info(callback_query.from_user.id)
            
            if not user_info:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ authorized_users")
                await callback_query.message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return
            
            user_fio = user_info[2]  # fio
            logger.info(f"–ü–æ–∏—Å–∫ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id} —Å –§–ò–û: {user_fio}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –§–ò–û –≤ –±–∞–∑–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_by_fio = await get_user_by_fio(user_fio)
            if not user_by_fio:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –§–ò–û '{user_fio}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                await callback_query.message.answer("‚ùå –í–∞—à–µ –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return
            
            today = datetime.now().strftime("%Y-%m-%d")
            schedule = await get_coffee_schedule_by_fio(user_fio)
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ –≥—Ä–∞—Ñ–∏–∫–µ –¥–ª—è {user_fio}: {len(schedule) if schedule else 0}")
            
            if not schedule:
                await callback_query.message.answer("‚òï –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–∂—É—Ä—Å—Ç–≤ –ø–æ –∫–æ—Ñ–µ.")
                return
                
            text = "‚òï <b>–í–∞—à –≥—Ä–∞—Ñ–∏–∫ –∫–æ—Ñ–µ:</b>\n\n"
            future_entries = 0
            
            for entry in schedule:
                # entry[0] = id/rowid, entry[1] = fio, entry[2] = date
                entry_date = entry[2]
                logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å: {entry_date} (—Ç–∏–ø: {type(entry_date)})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ None –∏ –Ω–µ –ø—É—Å—Ç–∞—è
                if entry_date is not None and entry_date != "":
                    try:
                        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–∞—Ç
                        if isinstance(entry_date, str):
                            if '.' in entry_date:
                                parsed_date = datetime.strptime(entry_date, "%d.%m.%Y")
                            elif '-' in entry_date:
                                try:
                                    parsed_date = datetime.strptime(entry_date, "%d-%m-%Y")
                                except ValueError:
                                    parsed_date = datetime.strptime(entry_date, "%Y-%m-%d")
                            else:
                                raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
                        else:
                            raise ValueError("–î–∞—Ç–∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞")
                        
                        today_date = datetime.strptime(today, "%Y-%m-%d")
                        
                        if parsed_date >= today_date:
                            text += f"üìÖ {entry_date}\n"
                            future_entries += 1
                            logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å {entry_date} –≤–∫–ª—é—á–µ–Ω–∞ (>= {today})")
                        else:
                            logger.info(f"‚ùå –ó–∞–ø–∏—Å—å {entry_date} –∏—Å–∫–ª—é—á–µ–Ω–∞ (< {today})")
                            
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã {entry_date}: {e}")
                        continue
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {future_entries} –±—É–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è {user_fio}")
            
            if future_entries == 0:
                await callback_query.message.answer("‚òï –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–∂—É—Ä—Å—Ç–≤ –ø–æ –∫–æ—Ñ–µ.")
            else:
                await callback_query.message.answer(text, parse_mode=ParseMode.HTML)
        
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ.", show_alert=True)

@dp.callback_query(lambda c: c.data == "propose_news")
async def propose_news_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:")
    await state.set_state(NewsProposal.waiting_for_text)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞
@dp.callback_query(lambda c: c.data == "search_by_fio")
async def search_by_fio_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()  # –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è!
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(Search.waiting_for_fio)
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "search_by_position")
async def search_by_position_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(Search.waiting_for_position)
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "search_by_department")
async def search_by_department_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–¥–µ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(Search.waiting_for_department)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–∏—Å–∫–∞
# –£–¥–∞–ª–µ–Ω–æ: —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ –§–ò–û, –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–¥–µ–ª—É (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–Ω–µ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
@dp.callback_query(lambda c: c.data == "view_news_proposals")
async def view_news_proposals_callback(callback_query: types.CallbackQuery):
    try:
        proposals = await get_pending_news_proposals()
        if not proposals:
            await callback_query.message.answer("üìã –ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.")
            await callback_query.answer()
            return
        
        for proposal in proposals:
            proposal_id, user_id, username, fio, news_text, photos_json, status, marketer_id, comment, created_at, processed_at = proposal
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã
            safe_fio = escape_html(fio)
            safe_username = escape_html(username) if username else '–ù–µ—Ç'
            safe_news_text = escape_html(news_text) if news_text else ''
            safe_created_at = escape_html(created_at) if created_at else ''
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve_news_{proposal_id}"))
            keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_news_{proposal_id}"))
            keyboard.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_news_{proposal_id}"))
            keyboard.add(InlineKeyboardButton(text="üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_news_{proposal_id}"))
            keyboard.adjust(2, 2)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            photos = json.loads(photos_json) if photos_json else []
            photos_text = f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photos)}" if photos else "üì∏ –ë–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"
            
            message_text = (
                f"üìã <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ #{proposal_id}</b>\n\n"
                f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {safe_fio}\n"
                f"üÜî <b>ID:</b> {user_id}\n"
                f"üìù <b>Username:</b> @{safe_username}\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {safe_created_at}\n"
                f"{photos_text}\n\n"
                f"üìÑ <b>–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:</b>\n{safe_news_text[:500]}{'...' if len(safe_news_text) > 500 else ''}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏–ª–∏ –±–µ–∑
            if photos:
                media_group = []
                for i, photo_id in enumerate(photos[:10]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ñ–æ—Ç–æ
                    if i == 0:
                        media_group.append(types.InputMediaPhoto(
                            media=photo_id,
                            caption=message_text,
                            parse_mode=ParseMode.HTML
                        ))
                    else:
                        media_group.append(types.InputMediaPhoto(media=photo_id))
                await callback_query.message.answer_media_group(media_group)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await callback_query.message.answer(
                    f"üéõÔ∏è <b>–î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è #{proposal_id}</b>",
                    reply_markup=keyboard.as_markup(),
                    parse_mode=ParseMode.HTML
                )
            else:
                await callback_query.message.answer(
                    message_text,
                    reply_markup=keyboard.as_markup(),
                    parse_mode=ParseMode.HTML
                )
        
        await callback_query.answer(f"–ù–∞–π–¥–µ–Ω–æ {len(proposals)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.", show_alert=True)

@dp.callback_query(lambda c: c.data == "view_pending_requests")
async def view_pending_requests_callback(callback_query: types.CallbackQuery):
    try:
        requests = await get_pending_auth_requests()
        if not requests:
            await callback_query.message.answer("üìã –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.")
            await callback_query.answer()
            return
        
        for request in requests:
            user_id, username, fio, position, created_at = request
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã
            safe_fio = escape_html(fio)
            safe_username = escape_html(username) if username else '–ù–µ—Ç'
            safe_position = escape_html(position)
            safe_created_at = escape_html(created_at) if created_at else ''
            
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}"))
            keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{user_id}"))
            keyboard.adjust(2)
            
            message_text = (
                f"üîî <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {safe_fio}\n"
                f"üÜî <b>ID:</b> {user_id}\n"
                f"üìù <b>Username:</b> @{safe_username}\n"
                f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {safe_position}\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {safe_created_at}"
            )
            
            await callback_query.message.answer(
                message_text,
                reply_markup=keyboard.as_markup(),
                parse_mode=ParseMode.HTML
            )
        
        await callback_query.answer(f"–ù–∞–π–¥–µ–Ω–æ {len(requests)} –∑–∞—è–≤–æ–∫")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞—è–≤–æ–∫: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
@dp.callback_query(lambda c: c.data == "view_requests")
async def view_requests_callback(callback_query: types.CallbackQuery):
    await view_pending_requests_callback(callback_query)

@dp.callback_query(lambda c: c.data == "view_users")
async def view_users_callback(callback_query: types.CallbackQuery):
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç {callback_query.from_user.id}")
        users = await get_authorized_users()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        if not users:
            await callback_query.message.answer("ÔøΩÔøΩ –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            await callback_query.answer()
            return

        text = "üë• <b>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
        for i, user in enumerate(users):
            try:
                user_id, username, fio, position, role = user
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã
                safe_fio = escape_html(fio)
                safe_username = escape_html(username) if username else '–ù–µ—Ç'
                safe_position = escape_html(position)
                safe_role = escape_html(role) if role else 'user'
                
                user_text = f"ÔøΩÔøΩ <b>{safe_fio}</b>\n"
                user_text += f"üÜî ID: {user_id}\n"
                user_text += f"ÔøΩÔøΩ @{safe_username}\n"
                user_text += f"üíº {safe_position}\n"
                user_text += f"ÔøΩÔøΩ –†–æ–ª—å: {safe_role}\n\n"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
                if len(text + user_text) > 4000:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –¥–ª–∏–Ω–æ–π {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    await callback_query.message.answer(text, parse_mode=ParseMode.HTML)
                    text = "üë• <b>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):</b>\n\n"
                
                text += user_text
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 10-–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if (i + 1) % 10 == 0:
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5)
                if i < 5:
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i+1}: ID={user_id}, FIO='{fio}', Username='{username}', Position='{position}', Role='{role}'")
                    logger.info(f"–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: FIO='{safe_fio}', Username='{safe_username}', Position='{safe_position}', Role='{safe_role}'")
                    
            except Exception as user_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {user_error}")
                continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å HTML –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        def validate_html(text):
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ HTML-—Ç–µ–≥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã"""
            open_tags = []
            i = 0
            while i < len(text):
                if text[i] == '<':
                    if i + 1 < len(text) and text[i + 1] == '/':
                        # –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
                        end = text.find('>', i)
                        if end == -1:
                            return False, f"–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–π —Ç–µ–≥ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i}"
                        tag = text[i+2:end].strip()
                        if not open_tags or open_tags.pop() != tag:
                            return False, f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–≥–æ–≤: –æ–∂–∏–¥–∞–ª—Å—è {open_tags[-1] if open_tags else 'None'}, –ø–æ–ª—É—á–µ–Ω {tag}"
                        i = end + 1
                    else:
                        # –û—Ç–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
                        end = text.find('>', i)
                        if end == -1:
                            return False, f"–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–π —Ç–µ–≥ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i}"
                        tag = text[i+1:end].strip()
                        if tag and not tag.startswith('/'):
                            open_tags.append(tag)
                        i = end + 1
                else:
                    i += 1
            return len(open_tags) == 0, None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å HTML
        is_valid, error_msg = validate_html(text)
        if not is_valid:
            logger.error(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π HTML: {error_msg}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
            plain_text = text.replace('<b>', '').replace('</b>', '')
            await callback_query.message.answer(plain_text)
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if len(text) > 4096:
                parts = [text[i:i+4096] for i in range(0, len(text), 4096)]
                for i, part in enumerate(parts):
                    await callback_query.message.answer(part, parse_mode=ParseMode.HTML)
            else:
                await callback_query.message.answer(text, parse_mode=ParseMode.HTML)
        
        await callback_query.answer(f"–ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
        try:
            logger.info("–ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏")
            plain_text = "üë• –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
            
            for i, user in enumerate(users[:20]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                try:
                    user_id, username, fio, position, role = user
                    plain_text += f"üë§ {fio or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                    plain_text += f"üÜî ID: {user_id}\n"
                    plain_text += f"ÔøΩÔøΩ @{username or '–ù–µ—Ç'}\n"
                    plain_text += f"üíº {position or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                    plain_text += f"üëë –†–æ–ª—å: {role or 'user'}\n\n"
                except Exception as user_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {user_error}")
                    continue
            
            if len(users) > 20:
                plain_text += f"... –∏ –µ—â–µ {len(users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            await callback_query.message.answer(plain_text)
            await callback_query.answer(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {min(20, len(users))} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
            
        except Exception as fallback_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–µ–∑ HTML: {fallback_error}")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
            
@dp.callback_query(lambda c: c.data == "assign_role")
async def assign_role_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if callback_query.from_user.id != ADMIN_ID:
            await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π.", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await get_authorized_users()
        
        if not users:
            await callback_query.message.answer("üë• –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            await callback_query.answer()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await show_users_page(callback_query.message, users, 0)
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)

async def show_users_page(message: types.Message, users: list, page: int, users_per_page: int = 7):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π –∏ —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        total_pages = (len(users) + users_per_page - 1) // users_per_page
        start_idx = page * users_per_page
        end_idx = min(start_idx + users_per_page, len(users))
        page_users = users[start_idx:end_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = f"üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        text += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n"
        text += f"üë§ –ü–æ–∫–∞–∑–∞–Ω–æ {len(page_users)} –∏–∑ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        for i, user in enumerate(page_users):
            user_id, username, fio, position, role = user
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã
            safe_fio = escape_html(fio) if fio else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            safe_username = escape_html(username) if username else '–ù–µ—Ç'
            safe_position = escape_html(position) if position else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            safe_role = escape_html(role) if role else 'user'
            
            text += f"<b>{start_idx + i + 1}.</b> üë§ <b>{safe_fio}</b>\n"
            text += f"üÜî ID: <code>{user_id}</code>\n"
            text += f"üì± @{safe_username}\n"
            text += f"üíº {safe_position}\n"
            text += f"üëë –†–æ–ª—å: {safe_role}\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardBuilder()
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for i, user in enumerate(page_users):
            user_id, username, fio, position, role = user
            user_num = start_idx + i + 1
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keyboard.add(InlineKeyboardButton(
                text=f"üë§ {user_num}. {fio[:20]}{'...' if len(fio) > 20 else ''}",
                callback_data=f"select_user_{user_id}"
            ))
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_row = []
        if page > 0:
            nav_row.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"users_page_{page - 1}"
            ))
        if page < total_pages - 1:
            nav_row.append(InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=f"users_page_{page + 1}"
            ))
        
        if nav_row:
            keyboard.row(*nav_row)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        keyboard.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
            callback_data="admin_panel"
        ))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        keyboard.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode=ParseMode.HTML)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@dp.callback_query(lambda c: c.data and c.data.startswith("users_page_"))
async def users_page_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if callback_query.from_user.id != ADMIN_ID:
            await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
            return
        
        # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page = int(callback_query.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await get_authorized_users()
        
        if not users:
            await callback_query.message.answer("üë• –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            await callback_query.answer()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await show_users_page(callback_query.message, users, page)
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.", show_alert=True)

@dp.callback_query(lambda c: c.data and c.data.startswith("select_user_"))
async def select_user_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if callback_query.from_user.id != ADMIN_ID:
            await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.", show_alert=True)
            return
        
        # –ü–∞—Ä—Å–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = int(callback_query.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await get_user_info(user_id)
        
        if not user_info:
            await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        user_id, username, fio, position, role = user_info
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã
        safe_fio = escape_html(fio) if fio else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        safe_username = escape_html(username) if username else '–ù–µ—Ç'
        safe_position = escape_html(position) if position else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        safe_role = escape_html(role) if role else 'user'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"üë§ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b>\n\n"
        text += f"üÜî <b>ID:</b> <code>{user_id}</code>\n"
        text += f"üë§ <b>–§–ò–û:</b> {safe_fio}\n"
        text += f"üì± <b>Username:</b> @{safe_username}\n"
        text += f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {safe_position}\n"
        text += f"üëë <b>–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å:</b> {safe_role}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = InlineKeyboardBuilder()
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π
        roles = [
            ("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "admin"),
            ("üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", "moderator"),
            ("üì¢ –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥", "marketer"),
            ("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "user")
        ]
        
        for role_name, role_value in roles:
            if role_value != role:  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å
                keyboard.add(InlineKeyboardButton(
                    text=f"–ù–∞–∑–Ω–∞—á–∏—Ç—å {role_name}",
                    callback_data=f"assign_role_{user_id}_{role_value}"
                ))
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard.add(InlineKeyboardButton(
            text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            callback_data=f"confirm_delete_{user_id}"
        ))
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
            callback_data="assign_role"
        ))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        keyboard.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥—É
        
        await callback_query.message.answer(text, reply_markup=keyboard.as_markup(), parse_mode=ParseMode.HTML)
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)

@dp.callback_query(lambda c: c.data and c.data.startswith("confirm_delete_"))
async def confirm_delete_user_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if callback_query.from_user.id != ADMIN_ID:
            await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
            return
        
        # –ü–∞—Ä—Å–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = int(callback_query.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await get_user_info(user_id)
        
        if not user_info:
            await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        user_id, username, fio, position, role = user_info
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã
        safe_fio = escape_html(fio) if fio else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        text = f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        text += f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        text += f"üë§ <b>–§–ò–û:</b> {safe_fio}\n"
        text += f"üÜî <b>ID:</b> <code>{user_id}</code>\n"
        text += f"üëë <b>–†–æ–ª—å:</b> {role}\n\n"
        text += "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardBuilder()
        
        keyboard.add(InlineKeyboardButton(
            text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
            callback_data=f"delete_user_{user_id}"
        ))
        keyboard.add(InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=f"select_user_{user_id}"
        ))
        
        keyboard.adjust(2)
        
        await callback_query.message.answer(text, reply_markup=keyboard.as_markup(), parse_mode=ParseMode.HTML)
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)

@dp.callback_query(lambda c: c.data and c.data.startswith("delete_user_"))
async def delete_user_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if callback_query.from_user.id != ADMIN_ID:
            await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
            return
        
        # –ü–∞—Ä—Å–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = int(callback_query.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        user_info = await get_user_info(user_id)
        
        if not user_info:
            await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        user_id, username, fio, position, role = user_info
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await remove_user(user_id)
        
        if success:
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await log_admin_action(callback_query.from_user.id, f"delete_user_{user_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            safe_fio = escape_html(fio) if fio else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            await callback_query.message.answer(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{safe_fio}</b> (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
                parse_mode=ParseMode.HTML
            )
        else:
            await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)

@dp.callback_query(lambda c: c.data and c.data.startswith("assign_role_"))
async def assign_role_callback_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if callback_query.from_user.id != ADMIN_ID:
            await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π.", show_alert=True)
            return
        
        # –ü–∞—Ä—Å–∏–º callback_data: assign_role_{user_id}_{role}
        parts = callback_query.data.split("_")
        if len(parts) >= 4:
            user_id = int(parts[2])
            role = parts[3]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await get_user_info(user_id)
            
            if not user_info:
                await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return
            
            user_id, username, fio, position, old_role = user_info
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å
            success = await assign_user_role(user_id, role, callback_query.from_user.id)
            
            if success:
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                await log_admin_action(callback_query.from_user.id, f"assign_role_{user_id}_{old_role}_{role}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                role_names = {
                    'admin': 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                    'moderator': 'üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', 
                    'marketer': 'üì¢ –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥',
                    'user': 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                }
                
                role_name = role_names.get(role, role)
                safe_fio = escape_html(fio) if fio else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                
                await callback_query.message.answer(
                    f"‚úÖ –†–æ–ª—å <b>{role_name}</b> –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{safe_fio}</b> (ID: {user_id})",
                    parse_mode=ParseMode.HTML
                )
            else:
                await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏.")
        else:
            await callback_query.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏.")
        
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏.", show_alert=True)

@dp.callback_query(lambda c: c.data == "send_notification")
async def send_notification_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    await state.set_state(Notify.waiting_for_notification)
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "sync_data")
async def sync_data_callback(callback_query: types.CallbackQuery):
    await callback_query.message.answer("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    try:
        logger.info(f"–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç {callback_query.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        sync_results = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        try:
            async with aiosqlite.connect(DB_PATH) as conn:
                cursor = await conn.execute("SELECT COUNT(*) FROM authorized_users")
                user_count = (await cursor.fetchone())[0]
                sync_results.append(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {user_count} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            sync_results.append(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –æ—à–∏–±–∫–∞ - {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞—è–≤–æ–∫
        try:
            async with aiosqlite.connect(DB_PATH) as conn:
                cursor = await conn.execute("SELECT COUNT(*) FROM auth_requests")
                request_count = (await cursor.fetchone())[0]
                sync_results.append(f"‚úÖ –ó–∞—è–≤–∫–∏: {request_count} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            sync_results.append(f"‚ùå –ó–∞—è–≤–∫–∏: –æ—à–∏–±–∫–∞ - {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–æ–≤–æ—Å—Ç–µ–π
        try:
            async with aiosqlite.connect(DB_PATH) as conn:
                cursor = await conn.execute("SELECT COUNT(*) FROM news_proposals")
                news_count = (await cursor.fetchone())[0]
                sync_results.append(f"‚úÖ –ù–æ–≤–æ—Å—Ç–∏: {news_count} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            sync_results.append(f"‚ùå –ù–æ–≤–æ—Å—Ç–∏: –æ—à–∏–±–∫–∞ - {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
        try:
            async with aiosqlite.connect(DB_PATH) as conn:
                cursor = await conn.execute("SELECT COUNT(*) FROM channel_subscribers")
                channel_count = (await cursor.fetchone())[0]
                sync_results.append(f"‚úÖ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –∫–∞–Ω–∞–ª–∞: {channel_count} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            sync_results.append(f"‚ùå –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –∫–∞–Ω–∞–ª–∞: –æ—à–∏–±–∫–∞ - {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = "üîÑ <b>–û—Ç—á–µ—Ç –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        report += "\n".join(sync_results)
        report += f"\n\nüìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        await callback_query.message.answer(report, parse_mode=ParseMode.HTML)
        await callback_query.answer("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", show_alert=True)

@dp.callback_query(lambda c: c.data == "sync_channel")
async def sync_channel_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ —Å Excel —Ñ–∞–π–ª–æ–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    await callback_query.message.answer("üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ —Å Excel —Ñ–∞–π–ª–æ–º...")
    await sync_channel_with_excel()
    await callback_query.message.answer("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
@dp.callback_query(lambda c: c.data == "publish_news")
async def publish_news_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
    await state.set_state(Moderator.waiting_for_news)
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "schedule_month")
async def schedule_month_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–§–ò–û: –î–î-–ú–ú-–ì–ì–ì–ì\n–§–ò–û: –î–î-–ú–ú-–ì–ì–ì–ì")
    await state.set_state(ScheduleMonth.waiting_for_schedule)
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "news_proposals")
async def news_proposals_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä)"""
    await view_news_proposals_callback(callback_query)

@dp.callback_query(lambda c: c.data == "statistics")
async def statistics_callback(callback_query: types.CallbackQuery):
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç {callback_query.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        async with aiosqlite.connect(DB_PATH) as conn:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            try:
                async with conn.execute("SELECT COUNT(*) FROM authorized_users") as cursor:
                    users_count = (await cursor.fetchone())[0]
            except Exception:
                users_count = 0
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π
            try:
                async with conn.execute("SELECT COUNT(*) FROM news_proposals") as cursor:
                    proposals_count = (await cursor.fetchone())[0]
            except Exception:
                proposals_count = 0
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –≥—Ä–∞—Ñ–∏–∫–µ –∫–æ—Ñ–µ
            try:
                async with conn.execute("SELECT COUNT(*) FROM coffee_schedule") as cursor:
                    coffee_count = (await cursor.fetchone())[0]
            except Exception:
                coffee_count = 0
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            try:
                async with conn.execute("SELECT COUNT(*) FROM auth_requests WHERE status = 'pending'") as cursor:
                    pending_requests = (await cursor.fetchone())[0]
            except Exception:
                pending_requests = 0
        
        stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>\n\n"
        stats_text += f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {users_count}\n"
        stats_text += f"ÔøΩÔøΩ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π:</b> {proposals_count}\n"
        stats_text += f"ÔøΩÔøΩ <b>–ó–∞–ø–∏—Å–µ–π –≤ –≥—Ä–∞—Ñ–∏–∫–µ –∫–æ—Ñ–µ:</b> {coffee_count}\n"
        stats_text += f"‚è≥ <b>–û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫:</b> {pending_requests}\n"
        
        await callback_query.message.answer(stats_text, parse_mode=ParseMode.HTML)
        await callback_query.answer()
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback_query.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞
@dp.callback_query(lambda c: c.data == "review_news_proposals")
async def review_news_proposals_callback(callback_query: types.CallbackQuery):
    await view_news_proposals_callback(callback_query)

@dp.callback_query(lambda c: c.data == "publication_stats")
async def publication_stats_callback(callback_query: types.CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        async with aiosqlite.connect(DB_PATH) as conn:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            async with conn.execute("SELECT COUNT(*) FROM news_proposals WHERE status = 'approved'") as cursor:
                approved_count = (await cursor.fetchone())[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            async with conn.execute("SELECT COUNT(*) FROM news_proposals WHERE status = 'rejected'") as cursor:
                rejected_count = (await cursor.fetchone())[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            async with conn.execute("SELECT COUNT(*) FROM news_proposals WHERE status = 'pending'") as cursor:
                pending_count = (await cursor.fetchone())[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            async with conn.execute("SELECT COUNT(*) FROM news_proposals WHERE status = 'commented'") as cursor:
                commented_count = (await cursor.fetchone())[0]
        
        stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:</b>\n\n"
        stats_text += f"‚úÖ <b>–û–¥–æ–±—Ä–µ–Ω–æ:</b> {approved_count}\n"
        stats_text += f"‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–æ:</b> {rejected_count}\n"
        stats_text += f"‚è≥ <b>–û–∂–∏–¥–∞–µ—Ç:</b> {pending_count}\n"
        stats_text += f"üí¨ <b>–ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ:</b> {commented_count}\n"
        
        await callback_query.message.answer(stats_text, parse_mode=ParseMode.HTML)
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", show_alert=True)

@dp.callback_query(lambda c: c.data == "create_news")
async def create_news_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:")
    await state.set_state(Moderator.waiting_for_news)
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "content_scheduler")
async def content_scheduler_callback(callback_query: types.CallbackQuery):
    await callback_query.message.answer("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    await callback_query.answer()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def check_and_fix_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∫–æ–ª–æ–Ω–∫–∏"""
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É coffee_schedule
            cursor = await conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='coffee_schedule'")
            table_exists = await cursor.fetchone()
            
            if table_exists:
                logger.info("üìã –¢–∞–±–ª–∏—Ü–∞ coffee_schedule —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É...")
                cursor = await conn.execute("PRAGMA table_info(coffee_schedule)")
                columns = await cursor.fetchall()
                column_names = [col[1] for col in columns]
                logger.info(f"üìä –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ coffee_schedule: {column_names}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                required_columns = ['id', 'fio', 'date', 'user_id', 'created_by', 'created_at', 'notified_at', 'reminder_sent_at']
                missing_columns = [col for col in required_columns if col not in column_names]
                
                if missing_columns:
                    logger.info(f"üîß –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ coffee_schedule: {missing_columns}")
                    logger.info("üîß –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏...")
                    
                    for col in missing_columns:
                        if col == 'id':
                            logger.info("  ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ id —á–µ—Ä–µ–∑ ALTER TABLE (–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å PRIMARY KEY)")
                            continue  # id —É–∂–µ –µ—Å—Ç—å –∫–∞–∫ PRIMARY KEY, –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ ALTER TABLE
                        elif col == 'user_id':
                            logger.info("  ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É user_id...")
                            await conn.execute('ALTER TABLE coffee_schedule ADD COLUMN user_id INTEGER')
                        elif col == 'created_by':
                            logger.info("  ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É created_by...")
                            await conn.execute('ALTER TABLE coffee_schedule ADD COLUMN created_by INTEGER')
                        elif col == 'created_at':
                            logger.info("  ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É created_at...")
                            await conn.execute('ALTER TABLE coffee_schedule ADD COLUMN created_at DATETIME')
                        elif col == 'notified_at':
                            logger.info("  ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É notified_at...")
                            await conn.execute('ALTER TABLE coffee_schedule ADD COLUMN notified_at DATETIME')
                        elif col == 'reminder_sent_at':
                            logger.info("  ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É reminder_sent_at...")
                            await conn.execute('ALTER TABLE coffee_schedule ADD COLUMN reminder_sent_at DATETIME')
                    
                    logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∏ –≤ coffee_schedule –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                else:
                    logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ coffee_schedule —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
            else:
                logger.info("üìã –¢–∞–±–ª–∏—Ü–∞ coffee_schedule –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...")
                await conn.execute('''
                    CREATE TABLE coffee_schedule (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        fio TEXT NOT NULL,
                        date TEXT NOT NULL,
                        user_id INTEGER,
                        created_by INTEGER,
                        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                        notified_at DATETIME,
                        reminder_sent_at DATETIME
                    )
                ''')
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ coffee_schedule —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É authorized_users (–¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É role –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
            try:
                cursor = await conn.execute("PRAGMA table_info(authorized_users)")
                columns = await cursor.fetchall()
                column_names = [col[1] for col in columns]
                
                if 'role' not in column_names:
                    logger.info("üîß –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É role –≤ authorized_users...")
                    logger.info("  ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É role...")
                    await conn.execute('ALTER TABLE authorized_users ADD COLUMN role TEXT DEFAULT "user"')
                    logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ role –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ authorized_users!")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É authorized_users: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É channel_subscribers
            try:
                cursor = await conn.execute("PRAGMA table_info(channel_subscribers)")
                columns = await cursor.fetchall()
                column_names = [col[1] for col in columns]
                
                if 'username' not in column_names:
                    logger.info("üîß –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É username –≤ channel_subscribers...")
                    await conn.execute('ALTER TABLE channel_subscribers ADD COLUMN username TEXT')
                    logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ username –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ channel_subscribers!")
                
                if 'subscribed_at' not in column_names:
                    logger.info("üîß –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É subscribed_at –≤ channel_subscribers...")
                    await conn.execute('ALTER TABLE channel_subscribers ADD COLUMN subscribed_at DATETIME DEFAULT CURRENT_TIMESTAMP')
                    logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ subscribed_at –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ channel_subscribers!")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É channel_subscribers: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É auth_requests
            try:
                cursor = await conn.execute("PRAGMA table_info(auth_requests)")
                columns = await cursor.fetchall()
                column_names = [col[1] for col in columns]
                
                if 'timestamp' not in column_names:
                    logger.info("üîß –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É timestamp –≤ auth_requests...")
                    logger.info("  ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É timestamp...")
                    await conn.execute('ALTER TABLE auth_requests ADD COLUMN timestamp TEXT')
                    logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ timestamp –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ auth_requests!")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É auth_requests: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É news_proposals
            try:
                cursor = await conn.execute("PRAGMA table_info(news_proposals)")
                columns = await cursor.fetchall()
                column_names = [col[1] for col in columns]
                
                required_news_columns = ['id', 'user_id', 'username', 'fio', 'news_text', 'photos', 'status', 'marketer_id', 'marketer_comment', 'created_at', 'processed_at']
                missing_news_columns = [col for col in required_news_columns if col not in column_names]
                
                if missing_news_columns:
                    logger.info(f"üîß –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ news_proposals: {missing_news_columns}")
                    logger.info("üîß –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏...")
                    for col in missing_news_columns:
                        if col == 'id':
                            logger.info("  ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ id —á–µ—Ä–µ–∑ ALTER TABLE (–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å PRIMARY KEY)")
                            continue
                        elif col in ['user_id', 'marketer_id']:
                            logger.info(f"  ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É {col}...")
                            await conn.execute(f'ALTER TABLE news_proposals ADD COLUMN {col} INTEGER')
                        elif col in ['created_at', 'processed_at']:
                            logger.info(f"  ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É {col}...")
                            await conn.execute(f'ALTER TABLE news_proposals ADD COLUMN {col} DATETIME')
                        else:
                            logger.info(f"  ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É {col}...")
                            await conn.execute(f'ALTER TABLE news_proposals ADD COLUMN {col} TEXT')
                    logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∏ –≤ news_proposals –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É news_proposals: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É admin_logs
            try:
                cursor = await conn.execute("PRAGMA table_info(admin_logs)")
                columns = await cursor.fetchall()
                column_names = [col[1] for col in columns]
                
                required_admin_columns = ['id', 'admin_id', 'action', 'target_user_id', 'timestamp']
                missing_admin_columns = [col for col in required_admin_columns if col not in column_names]
                
                if missing_admin_columns:
                    logger.info(f"üîß –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ admin_logs: {missing_admin_columns}")
                    logger.info("üîß –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏...")
                    for col in missing_admin_columns:
                        if col == 'id':
                            logger.info("  ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ id —á–µ—Ä–µ–∑ ALTER TABLE (–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å PRIMARY KEY)")
                            continue
                        elif col in ['admin_id', 'target_user_id']:
                            logger.info(f"  ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É {col}...")
                            await conn.execute(f'ALTER TABLE admin_logs ADD COLUMN {col} INTEGER')
                        elif col == 'timestamp':
                            logger.info(f"  ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É {col}...")
                            await conn.execute(f'ALTER TABLE admin_logs ADD COLUMN {col} DATETIME')
                        else:
                            logger.info(f"  ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É {col}...")
                            await conn.execute(f'ALTER TABLE admin_logs ADD COLUMN {col} TEXT')
                    logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∏ –≤ admin_logs –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É admin_logs: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            try:
                # authorized_users
                cursor = await conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='authorized_users'")
                if not await cursor.fetchone():
                    logger.info("üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É authorized_users...")
                    await conn.execute('''
                        CREATE TABLE authorized_users (
                            user_id INTEGER PRIMARY KEY,
                            username TEXT,
                            fio TEXT,
                            position TEXT,
                            role TEXT DEFAULT 'user'
                        )
                    ''')
                    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ authorized_users —Å–æ–∑–¥–∞–Ω–∞!")
                
                # auth_requests
                cursor = await conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='auth_requests'")
                if not await cursor.fetchone():
                    logger.info("üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É auth_requests...")
                    await conn.execute('''
                        CREATE TABLE auth_requests (
                            user_id INTEGER PRIMARY KEY,
                            username TEXT,
                            fio TEXT,
                            position TEXT,
                            timestamp TEXT
                        )
                    ''')
                    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ auth_requests —Å–æ–∑–¥–∞–Ω–∞!")
                
                # news_proposals
                cursor = await conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='news_proposals'")
                if not await cursor.fetchone():
                    logger.info("üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É news_proposals...")
                    await conn.execute('''
                        CREATE TABLE news_proposals (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            user_id INTEGER,
                            username TEXT,
                            fio TEXT,
                            news_text TEXT,
                            photos TEXT,
                            status TEXT DEFAULT 'pending',
                            marketer_id INTEGER,
                            marketer_comment TEXT,
                            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                            processed_at DATETIME
                        )
                    ''')
                    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ news_proposals —Å–æ–∑–¥–∞–Ω–∞!")
                
                # admin_logs
                cursor = await conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='admin_logs'")
                if not await cursor.fetchone():
                    logger.info("üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É admin_logs...")
                    await conn.execute('''
                        CREATE TABLE admin_logs (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            admin_id INTEGER,
                            action TEXT,
                            target_user_id INTEGER,
                            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                        )
                    ''')
                    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ admin_logs —Å–æ–∑–¥–∞–Ω–∞!")
                
                # channel_subscribers
                cursor = await conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='channel_subscribers'")
                if not await cursor.fetchone():
                    logger.info("üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É channel_subscribers...")
                    await conn.execute('''
                        CREATE TABLE channel_subscribers (
                            user_id INTEGER PRIMARY KEY,
                            fio TEXT,
                            username TEXT,
                            subscribed_at DATETIME DEFAULT CURRENT_TIMESTAMP
                        )
                    ''')
                    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ channel_subscribers —Å–æ–∑–¥–∞–Ω–∞!")
                
                # notified_channel_subscribers
                cursor = await conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='notified_channel_subscribers'")
                if not await cursor.fetchone():
                    logger.info("üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É notified_channel_subscribers...")
                    await conn.execute('CREATE TABLE notified_channel_subscribers (user_id INTEGER PRIMARY KEY)')
                    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ notified_channel_subscribers —Å–æ–∑–¥–∞–Ω–∞!")
                
                # notified_bot_users
                cursor = await conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='notified_bot_users'")
                if not await cursor.fetchone():
                    logger.info("üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É notified_bot_users...")
                    await conn.execute('CREATE TABLE notified_bot_users (user_id INTEGER PRIMARY KEY)')
                    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ notified_bot_users —Å–æ–∑–¥–∞–Ω–∞!")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {e}")
            
            await conn.commit()
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
            # –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ...")
            await clean_invalid_coffee_entries()
            logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await check_and_fix_database()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    logger.info("ÔøΩÔøΩÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_db()
    await init_channel_subscribers_table()
    await init_notified_channel_subscribers_table()
    await init_notified_bot_users_table()
    await ensure_auth_requests_timestamp_column()
    logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    logger.info("üëë –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º...")
    await assign_roles()
    logger.info("‚úÖ –†–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω—ã")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Ä–æ–ª–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–æ–ª–µ–π...")
    await migrate_roles_from_env()
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
    # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    # await cleanup_env_roles()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞—è
    try:
        logger.info("üë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        async with aiosqlite.connect(DB_PATH) as conn:
            async with conn.execute("SELECT COUNT(*) FROM authorized_users") as cursor:
                users_count = (await cursor.fetchone())[0]
            
            if users_count == 0:
                logger.info("–ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
                # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                await conn.execute('''
                    INSERT INTO authorized_users (user_id, username, fio, position, role) 
                    VALUES (?, ?, ?, ?, ?)
                ''', (ADMIN_ID, 'admin', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –°–∏—Å—Ç–µ–º—ã', '–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 'admin'))
                
                await conn.commit()
                logger.info("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            else:
                logger.info(f"‚úÖ –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    logger.info("üåê –ó–∞–ø—É—Å–∫ Flask –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    import threading
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    logger.info("‚úÖ Flask –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5000")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ—Ñ–µ–º–∞—à–∏–Ω–µ
    logger.info("‚òï –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ—Ñ–µ–º–∞—à–∏–Ω–µ...")
    coffee_notification_task = asyncio.create_task(schedule_coffee_notifications())
    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ—Ñ–µ–º–∞—à–∏–Ω–µ –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ 11:00, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ 16:00)")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–∞–Ω–∞–ª–∞
    logger.info("üì¢ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞...")
    channel_sync_task = asyncio.create_task(periodic_channel_sync())
    logger.info("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ...")
    await sync_channel_with_excel()
    logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await dp.start_polling(bot)

async def clear_old_keyboards():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        logger.info("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
        user_ids = await get_all_authorized_user_ids()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
        
        cleared_count = 0
        for user_id in user_ids:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–º–µ–Ω–∏—Ç —Å—Ç–∞—Ä—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                await send_main_menu(
                    types.Message(
                        message_id=0,
                        date=datetime.now(),
                        chat=types.Chat(id=user_id, type="private"),
                        from_user=types.User(id=user_id, is_bot=False, first_name="User")
                    ),
                    user_id=user_id
                )
                cleared_count += 1
                logger.info(f"–û—á–∏—â–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {cleared_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return cleared_count
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")
        return 0

@dp.callback_query(lambda c: c.data and c.data.startswith("edit_news_"))
async def edit_news_callback(callback_query: types.CallbackQuery, state: FSMContext):
    proposal_id = int(callback_query.data.split("_")[-1])
    await state.update_data(editing_proposal_id=proposal_id)
    await callback_query.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:")
    await state.set_state(EditNewsProposal.waiting_for_text)
    await callback_query.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith("comment_news_"))
async def comment_news_callback(callback_query: types.CallbackQuery, state: FSMContext):
    proposal_id = int(callback_query.data.split("_")[-1])
    await state.update_data(commenting_proposal_id=proposal_id)
    await callback_query.message.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é:")
    await state.set_state(CommentNews.waiting_for_comment)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(EditNewsProposal.waiting_for_text)
async def process_edit_news_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    proposal_id = data.get('editing_proposal_id')
    
    try:
        await update_news_proposal_content(proposal_id, message.text, None)
        await message.answer(f"‚úÖ –¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è #{proposal_id} –æ–±–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.")
    
    await state.clear()
    await send_main_menu(message, user_id=message.from_user.id)

@dp.message(CommentNews.waiting_for_comment)
async def process_comment_news(message: types.Message, state: FSMContext):
    data = await state.get_data()
    proposal_id = data.get('commenting_proposal_id')
    
    try:
        await update_news_proposal_status(proposal_id, 'commented', message.from_user.id, message.text)
        await message.answer(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é #{proposal_id} –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")
    
    await state.clear()
    await send_main_menu(message, user_id=message.from_user.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
@dp.message(NewsProposal.waiting_for_text)
async def process_news_text(message: types.Message, state: FSMContext):
    logger.debug(f"NEWS_TEXT: user_id={message.from_user.id}, text_length={len(message.text)}")
    await state.update_data(news_text=message.text)
    await message.answer(
        "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ).\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'."
    )
    await state.set_state(NewsProposal.waiting_for_photos)

@dp.message(NewsProposal.waiting_for_photos, F.photo)
async def process_news_photo(message: types.Message, state: FSMContext):
    logger.debug(f"NEWS_PHOTO: user_id={message.from_user.id}, photo_id={message.photo[-1].file_id}")
    data = await state.get_data()
    photos = data.get('photos', [])
    photo = message.photo[-1]
    photos.append(photo.file_id)
    await state.update_data(photos=photos)
    
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    last_keyboard_msg_id = data.get('last_keyboard_msg_id')
    if last_keyboard_msg_id:
        try:
            await message.bot.edit_message_reply_markup(
                chat_id=message.chat.id,
                message_id=last_keyboard_msg_id,
                reply_markup=None
            )
        except Exception:
            pass
    
    sent = await message.answer(
        f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞! –í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photos)}",
        reply_markup=BeautifulInlineKeyboards.create_news_photos_keyboard()
    )
    await state.update_data(last_keyboard_msg_id=sent.message_id)

@dp.callback_query(lambda c: c.data == "news_photos_done")
async def news_photos_done_callback(callback_query: types.CallbackQuery, state: FSMContext):
    logger.debug(f"CALLBACK: news_photos_done from user {callback_query.from_user.id}")
    current_state = await state.get_state()
    logger.debug(f"CALLBACK: news_photos_done current_state={current_state}, expected={NewsProposal.waiting_for_photos.state}")
    
    if current_state != NewsProposal.waiting_for_photos.state:
        logger.debug(f"CALLBACK: news_photos_done wrong state for user {callback_query.from_user.id}")
        await callback_query.answer("–í—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏.", show_alert=True)
        try:
            await callback_query.message.edit_reply_markup(reply_markup=None)
        except Exception:
            pass
        return
    
    await finish_news_proposal(callback_query.message, state, from_callback=True, real_user_id=callback_query.from_user.id)
    await callback_query.answer()
    try:
        await callback_query.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

@dp.message(NewsProposal.waiting_for_photos, F.text)
async def finish_news_proposal(message: types.Message, state: FSMContext, from_callback=False, real_user_id=None):
    if real_user_id is None:
        real_user_id = message.from_user.id
    
    logger.debug(f"FINISH_NEWS: user_id={real_user_id}, from_callback={from_callback}")
    
    data = await state.get_data()
    news_text = data.get('news_text', '')
    photos = data.get('photos', [])
    
    if not news_text.strip():
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        await state.clear()
        await send_main_menu(message, user_id=real_user_id)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await get_user_info(real_user_id)
        if not user_info:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            await state.clear()
            await send_main_menu(message, user_id=real_user_id)
            return
        
        fio = user_info[2]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ FIO –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç—Ä–µ—Ç—å–µ–º –ø–æ–ª–µ
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        photos_json = json.dumps(photos) if photos else None
        proposal_id = await add_news_proposal(real_user_id, message.from_user.username, fio, news_text, photos_json)
        
        logger.info(f"NEWS_PROPOSAL: saved proposal_id={proposal_id} from user_id={real_user_id}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞
        marketer_message = (
            f"üìã <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ #{proposal_id}</b>\n\n"
            f"ÔøΩÔøΩ <b>–ê–≤—Ç–æ—Ä:</b> {fio}\n"
            f"üÜî <b>ID:</b> {real_user_id}\n"
            f"ÔøΩÔøΩ <b>Username:</b> @{message.from_user.username or '–ù–µ—Ç'}\n"
            f"ÔøΩÔøΩ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:</b> {len(photos)}\n\n"
            f"üìÑ <b>–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:</b>\n{news_text[:300]}{'...' if len(news_text) > 300 else ''}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve_news_{proposal_id}"))
        keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_news_{proposal_id}"))
        keyboard.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_news_{proposal_id}"))
        keyboard.add(InlineKeyboardButton(text="üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_news_{proposal_id}"))
        keyboard.adjust(2, 2)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥—É
        await bot.send_message(MARKETER_ID, marketer_message, reply_markup=keyboard.as_markup(), parse_mode=ParseMode.HTML)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥—É!\n\n"
            f"üìã <b>–ù–æ–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b> #{proposal_id}\n"
            f"üìÑ <b>–¢–µ–∫—Å—Ç:</b> {news_text[:100]}{'...' if len(news_text) > 100 else ''}\n"
            f"ÔøΩÔøΩ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:</b> {len(photos)}\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞.",
            parse_mode=ParseMode.HTML
        )
        
        logger.info(f"NEWS_PROPOSAL: success for user_id={real_user_id}, proposal_id={proposal_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()
    await send_main_menu(message, user_id=real_user_id)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
def search_by_fio(df, fio):
    """–ü–æ–∏—Å–∫ –ø–æ –§–ò–û —Å —É—á–µ—Ç–æ–º –ï/–Å –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞"""
    if fio is None or fio.strip() == '':
        return df
    
    search_term = normalize_fio(fio)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –§–ò–û –¥–ª—è –ø–æ–∏—Å–∫–∞
    df_temp = df.copy()
    df_temp['–§–ò–û_normalized'] = df_temp['–§–ò–û'].astype(str).apply(normalize_fio)
    
    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    results = df_temp[df_temp['–§–ò–û_normalized'].str.contains(search_term, case=False, na=False)]
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
    results = results.drop('–§–ò–û_normalized', axis=1)
    
    return results

def search_by_position(df, position):
    """–ü–æ–∏—Å–∫ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –ï/–Å –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞"""
    if position is None or position.strip() == '':
        return df
    
    search_term = normalize_fio(position)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    df_temp = df.copy()
    df_temp['–î–æ–ª–∂–Ω–æ—Å—Ç—å_normalized'] = df_temp['–î–æ–ª–∂–Ω–æ—Å—Ç—å'].astype(str).apply(normalize_fio)
    
    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    results = df_temp[df_temp['–î–æ–ª–∂–Ω–æ—Å—Ç—å_normalized'].str.contains(search_term, case=False, na=False)]
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
    results = results.drop('–î–æ–ª–∂–Ω–æ—Å—Ç—å_normalized', axis=1)
    
    return results

def search_by_department(df, department):
    """–ü–æ–∏—Å–∫ –ø–æ –æ—Ç–¥–µ–ª—É —Å —É—á–µ—Ç–æ–º –ï/–Å –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞"""
    if department is None or department.strip() == '':
        return df
    
    search_term = normalize_fio(department)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –æ—Ç–¥–µ–ª–∞–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    df_temp = df.copy()
    df_temp['–û—Ç–¥–µ–ª_normalized'] = df_temp['–û—Ç–¥–µ–ª'].astype(str).apply(normalize_fio)
    
    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    results = df_temp[df_temp['–û—Ç–¥–µ–ª_normalized'].str.contains(search_term, case=False, na=False)]
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
    results = results.drop('–û—Ç–¥–µ–ª_normalized', axis=1)
    
    return results

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message(AssignRole.waiting_for_user_id)
async def process_assign_role_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text.strip())
        await state.update_data(target_user_id=user_id)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=BeautifulInlineKeyboards.create_role_selection_keyboard(user_id))
        await state.set_state(AssignRole.waiting_for_role)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@dp.message(AssignRole.waiting_for_role)
async def process_assign_role_role(message: types.Message, state: FSMContext):
    data = await state.get_data()
    target_user_id = data.get('target_user_id')
    role = message.text.strip().lower()
    
    if role in ['admin', 'moderator', 'marketer', 'user']:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏
            success = await assign_user_role(target_user_id, role, message.from_user.id)
            
            if success:
                await message.answer(f"‚úÖ –†–æ–ª—å '{role}' –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
            else:
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: admin, moderator, marketer, user")
    
    await state.clear()
    await send_main_menu(message, user_id=message.from_user.id)

@dp.message(RemoveUser.waiting_for_user_id)
async def process_remove_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text.strip())
        await remove_user(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
        await log_admin_action(message.from_user.id, f"–£–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    
    await state.clear()
    await send_main_menu(message, user_id=message.from_user.id)

@dp.message(Notify.waiting_for_notification)
async def process_notification_text(message: types.Message, state: FSMContext):
    try:
        users = await get_authorized_users()
        sent_count = 0
        for user in users:
            user_id = user[0]
            try:
                await bot.send_message(user_id, f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{message.text}", parse_mode=ParseMode.HTML)
                sent_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        await message.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ {len(users)}")
        await log_admin_action(message.from_user.id, f"–û—Ç–ø—Ä–∞–≤–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    
    await state.clear()
    await send_main_menu(message, user_id=message.from_user.id)

@dp.message(Moderator.waiting_for_news)
async def process_moderator_news(message: types.Message, state: FSMContext):
    try:
        # –ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª
        await bot.send_message(CHANNEL_CHAT_ID, f"üì¢ <b>–ù–æ–≤–æ—Å—Ç—å –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{message.text}", parse_mode=ParseMode.HTML)
        await message.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.")
    
    await state.clear()
    await send_main_menu(message, user_id=message.from_user.id)

@dp.message(ScheduleMonth.waiting_for_schedule)
async def process_schedule_month(message: types.Message, state: FSMContext):
    lines = message.text.strip().split('\n')
    entries = []
    errors = []
    for line in lines:
        if not line.strip():
            continue
        if ':' not in line:
            errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: {line}")
            continue
        fio_part, date_part = line.split(':', 1)
        fio = fio_part.strip()
        date_str = date_part.strip()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            date_obj = datetime.strptime(date_str, "%d.%m.%Y")
            entries.append((fio, date_str))
        except Exception:
            errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str} (–æ–∂–∏–¥–∞–µ—Ç—Å—è –î–î.–ú–ú.–ì–ì–ì–ì)")
    if entries:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω–æ
        for fio, date_str in entries:
            await add_coffee_schedule_entry(fio, date_str, message.from_user.id)
        await message.answer(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(entries)}")
    if errors:
        await message.answer("\n".join(errors))
    await state.clear()
    await send_main_menu(message, user_id=message.from_user.id)

async def sync_channel_with_excel():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ —Å Excel —Ñ–∞–π–ª–æ–º"""
    try:
        import pandas as pd
        import os
        from pyrogram import Client
        
        if not CHANNEL_USERS_EXCEL or not os.path.exists(CHANNEL_USERS_EXCEL):
            logger.warning("Excel —Ñ–∞–π–ª –∫–∞–Ω–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            return

        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(CHANNEL_USERS_EXCEL)
        logger.info(f"Channel sync: Excel loaded with {len(df)} rows")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –§–ò–û
        fio_column = None
        for col in df.columns:
            if '—Ñ–∏–æ' in col.lower() or '—Ñio' in col.lower() or '–∏–º—è' in col.lower() or 'name' in col.lower():
                fio_column = col
                break
        
        if fio_column is None:
            fio_column = df.columns[0]
            logger.warning(f"–ö–æ–ª–æ–Ω–∫–∞ —Å –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º: {fio_column}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –§–ò–û –∏–∑ Excel
        allowed_fios = set()
        for _, row in df.iterrows():
            fio = str(row[fio_column]).strip()
            if fio and fio.lower() not in ['nan', 'none', '']:
                allowed_fios.add(fio.lower())
        
        logger.info(f"Channel sync: {len(allowed_fios)} allowed FIOs from Excel")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        current_subscribers = await get_channel_subscribers()
        logger.info(f"Channel sync: {len(current_subscribers)} current subscribers")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Pyrogram –∫–ª–∏–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º
        pyrogram_client = None
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
            if ('PYROGRAM_API_ID' in globals() and 'PYROGRAM_API_HASH' in globals() and 'PYROGRAM_BOT_TOKEN' in globals() and
                PYROGRAM_API_ID != "your_api_id" and PYROGRAM_API_HASH != "your_api_hash" and PYROGRAM_BOT_TOKEN):
                
                pyrogram_client = Client(
                    "channel_manager",
                    api_id=int(PYROGRAM_API_ID),
                    api_hash=PYROGRAM_API_HASH,
                    bot_token=PYROGRAM_BOT_TOKEN
                )
                await pyrogram_client.start()
                logger.info("Pyrogram –∫–ª–∏–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º –∑–∞–ø—É—â–µ–Ω")
            else:
                logger.warning("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Pyrogram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ setup_pyrogram.py –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Pyrogram –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            pyrogram_client = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
        removed_count = 0
        for user_id, username, fio, subscribed_at in current_subscribers:
            if fio and fio.lower() not in allowed_fios:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ Excel - —É–¥–∞–ª—è–µ–º
                try:
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    await remove_channel_subscriber(user_id)
                    
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ Pyrogram
                    if pyrogram_client and CHANNEL_CHAT_ID:
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                            user_info = await pyrogram_client.get_users(user_id)
                            
                            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞
                            await pyrogram_client.ban_chat_member(
                                chat_id=int(CHANNEL_CHAT_ID),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
                                user_id=user_id
                            )
                            logger.info(f"Channel sync: removed user {user_id} ({fio}) from channel via Pyrogram")
                            
                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ aiogram –±–æ—Ç–∞
                            try:
                                await bot.send_message(
                                    user_id,
                                    f"‚ùå <b>–î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –æ—Ç–æ–∑–≤–∞–Ω</b>\n\n"
                                    f" <b>–§–ò–û:</b> {fio}\n\n"
                                    f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> –í–∞—à–µ –§–ò–û –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
                                    f"–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                                    parse_mode=ParseMode.HTML
                                )
                            except Exception as e:
                                logger.error(f"Channel sync: error notifying user {user_id}: {e}")
                                
                        except Exception as channel_error:
                            logger.error(f"Channel sync: error removing user {user_id} from channel via Pyrogram: {channel_error}")
                    else:
                        logger.warning(f"Pyrogram –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞")
                    
                    removed_count += 1
                    
                except Exception as e:
                    logger.error(f"Channel sync: error processing user {user_id}: {e}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º Pyrogram –∫–ª–∏–µ–Ω—Ç
        if pyrogram_client:
            await pyrogram_client.stop()
            logger.info("Pyrogram –∫–ª–∏–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if removed_count > 0:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            admin_message = (
                f"ÔøΩÔøΩ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
                f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
                f"‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Excel: {len(allowed_fios)}\n"
                f"‚Ä¢ –¢–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(current_subscribers)}\n"
                f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {removed_count}\n\n"
                f"üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            
            await bot.send_message(ADMIN_ID, admin_message, parse_mode=ParseMode.HTML)
            logger.info(f"Channel sync completed: {removed_count} users removed")
        else:
            logger.info("Channel sync completed: no users to remove")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
        try:
            await bot.send_message(
                ADMIN_ID,
                f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞</b>\n\n"
                f"üîç <b>–û—à–∏–±–∫–∞:</b> {str(e)}\n"
                f"üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                parse_mode=ParseMode.HTML
            )
        except:
            pass

async def periodic_channel_sync():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ —Å Excel —Ñ–∞–π–ª–æ–º (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 17:00)"""
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            now = datetime.now()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (17:00)
            next_check = now.replace(hour=17, minute=0, second=0, microsecond=0)
            
            # –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ 17:00, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            if now.time() >= datetime.time(17, 0):
                next_check += timedelta(days=1)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            wait_seconds = (next_check - now).total_seconds()
            
            logger.info(f"–°–ª–µ–¥—É—é—â–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {next_check.strftime('%d.%m.%Y %H:%M')}")
            logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {wait_seconds/3600:.1f} —á–∞—Å–æ–≤ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await asyncio.sleep(wait_seconds)
            
            logger.info("üïî –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ (17:00)...")
            await sync_channel_with_excel()
            logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except asyncio.CancelledError:
            logger.info("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
            # –ñ–¥–µ–º —á–∞—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(60 * 60)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞
@dp.message(Command("sync_channel"))
async def sync_channel_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ —Å Excel —Ñ–∞–π–ª–æ–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await message.answer("üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ —Å Excel —Ñ–∞–π–ª–æ–º...")
    await sync_channel_with_excel()
    await message.answer("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

@dp.message(Command("channel_status"))
async def channel_status_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        import pandas as pd
        import os
        
        status_text = "üì∫ <b>–°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞</b>\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Excel —Ñ–∞–π–ª
        if CHANNEL_USERS_EXCEL and os.path.exists(CHANNEL_USERS_EXCEL):
            df = pd.read_excel(CHANNEL_USERS_EXCEL)
            status_text += f"‚úÖ Excel —Ñ–∞–π–ª: {len(df)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        else:
            status_text += "‚ùå Excel —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –±–∞–∑–µ
        subscribers = await get_channel_subscribers()
        status_text += f"üìä –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –±–∞–∑–µ: {len(subscribers)}\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Pyrogram
        if ('PYROGRAM_API_ID' in globals() and 'PYROGRAM_API_HASH' in globals() and 'PYROGRAM_BOT_TOKEN' in globals() and
            PYROGRAM_API_ID != "your_api_id" and PYROGRAM_API_HASH != "your_api_hash" and PYROGRAM_BOT_TOKEN):
            status_text += "‚úÖ Pyrogram –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
        else:
            status_text += "‚ùå Pyrogram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∑–∞–ø—É—Å—Ç–∏—Ç–µ setup_pyrogram.py)\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –∫–∞–Ω–∞–ª–∞
        if CHANNEL_CHAT_ID:
            status_text += f"üì¢ –ö–∞–Ω–∞–ª: {CHANNEL_CHAT_ID}\n"
        else:
            status_text += "‚ùå ID –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        if subscribers:
            status_text += "\nüë• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏:</b>\n"
            for i, (user_id, username, fio) in enumerate(subscribers[:5], 1):
                status_text += f"{i}. {fio} (@{username or '–Ω–µ—Ç'})\n"
        
        await message.answer(status_text, parse_mode=ParseMode.HTML)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
@dp.chat_join_request()
async def handle_chat_join_request(update: types.ChatJoinRequest):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª"""
    try:
        user_id = update.from_user.id
        username = update.from_user.username
        
        logger.info(f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª: user_id={user_id}, username={username}")
        
        # –í—Å–µ–≥–¥–∞ –æ–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É –≤—Ä–µ–º–µ–Ω–Ω–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É
        await update.approve()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –§–ò–û
        try:
            await bot.send_message(
                user_id,
                "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à–µ –§–ò–û.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):",
                parse_mode=ParseMode.HTML
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ pending_channel_request
            state = FSMContext(storage=dp.storage, chat_id=user_id, user_id=user_id)
            await state.set_state(ChannelSubscribe.waiting_for_fio)
            await state.update_data(pending_channel_request=True)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
            admin_message = (
                f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª</b>\n\n"
                f"üÜî <b>ID:</b> {user_id}\n"
                f"üë§ <b>Username:</b> @{username or '–ù–µ—Ç'}\n"
                f"üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"‚è≥ <b>–°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–µ—Ç —É–∫–∞–∑–∞–Ω–∏—è –§–ò–û"
            )
            
            await bot.send_message(ADMIN_ID, admin_message, parse_mode=ParseMode.HTML)
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –§–ò–û –¥–ª—è user_id={user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –§–ò–û –¥–ª—è user_id={user_id}: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É
            try:
                await update.decline()
            except:
                pass
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª: {e}")
        try:
            await update.decline()
        except:
            pass

@dp.callback_query(lambda c: c.data == "get_invite_link")
async def get_invite_link_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –≤ –∫–∞–Ω–∞–ª"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    try:
        if INVITE_LINK and INVITE_LINK != "https://t.me/+your_invite_link_here":
            await callback_query.message.answer(
                f"üîó <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≤ –∫–∞–Ω–∞–ª</b>\n\n"
                f"üì¢ <b>–ö–∞–Ω–∞–ª:</b> {CHANNEL_CHAT_ID}\n\n"
                f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {INVITE_LINK}\n\n"
                f"üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
                f"1. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
                f"2. –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Å—ã–ª–∫–µ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç –§–ò–û\n"
                f"3. –ï—Å–ª–∏ –§–ò–û –µ—Å—Ç—å –≤ Excel - –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞\n"
                f"4. –ï—Å–ª–∏ –§–ò–û –Ω–µ—Ç - –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n"
                f"5. –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ò–û –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è",
                parse_mode=ParseMode.HTML
            )
        else:
            await callback_query.message.answer(
                "‚ùå <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞</b>\n\n"
                f"üì¢ <b>–ö–∞–Ω–∞–ª:</b> {CHANNEL_CHAT_ID}\n\n"
                f"üîß <b>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
                f"1. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é INVITE_LINK –≤ .env —Ñ–∞–π–ª\n"
                f"2. –£–∫–∞–∂–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ\n"
                f"3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞",
                parse_mode=ParseMode.HTML
            )
        
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(lambda c: c.data == "create_coffee_schedule")
async def create_coffee_schedule_callback(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await callback_query.message.edit_text(
            "üìù <b>–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>–§–ò–û1: –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–§–ò–û2: –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–§–ò–û3: –î–î.–ú–ú.–ì–ì–ì–ì</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á: 15.12.2024\n"
            "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á: 16.12.2024</code>",
            parse_mode=ParseMode.HTML
        )
        await state.set_state(CoffeeSchedule.waiting_for_schedule)
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@dp.callback_query(lambda c: c.data == "view_coffee_schedule")
async def view_coffee_schedule_callback(callback_query: types.CallbackQuery):
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ...")
        schedule = await get_all_coffee_schedule()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ: {len(schedule)}")
        
        if not schedule:
            logger.info("–ì—Ä–∞—Ñ–∏–∫ –ø—É—Å—Ç")
            await callback_query.message.edit_text(
                "üìä <b>–ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã</b>\n\n"
                "–ì—Ä–∞—Ñ–∏–∫ –ø—É—Å—Ç.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ –¥–∞—Ç–∞–º...")
        schedule_by_date = {}
        for i, entry in enumerate(schedule):
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å {i}: {entry}")
            try:
                date = entry[2]  # date
                fio = entry[1]   # fio
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è: date={repr(date)}, fio={repr(fio)}")
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞—Ç–∞–º–∏
                if date is None or date == "":
                    logger.warning(f"–ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å –ø—É—Å—Ç–æ–π –¥–∞—Ç–æ–π –¥–ª—è –§–ò–û: {fio}")
                    continue
                    
                if date not in schedule_by_date:
                    schedule_by_date[date] = []
                schedule_by_date[date].append(fio)
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: {fio} –Ω–∞ {date}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ {i}: {e}")
                continue
        
        if not schedule_by_date:
            await callback_query.message.edit_text(
                "üìä <b>–ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã</b>\n\n"
                "–ì—Ä–∞—Ñ–∏–∫ –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
        valid_dates = [date for date in schedule_by_date.keys() if date is not None]
        if not valid_dates:
            await callback_query.message.edit_text(
                "üìä <b>–ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã</b>\n\n"
                "–ì—Ä–∞—Ñ–∏–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏.",
                parse_mode=ParseMode.HTML
            )
            return
        
        text = "üìä <b>–ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã:</b>\n\n"
        for date in sorted(valid_dates):
            text += f"üìÖ <b>{date}</b>\n"
            for fio in schedule_by_date[date]:
                text += f"  ‚Ä¢ {fio}\n"
            text += "\n"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="coffee_schedule")
        keyboard.adjust(1)
        
        await callback_query.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode=ParseMode.HTML
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@dp.callback_query(lambda c: c.data == "clear_coffee_schedule")
async def clear_coffee_schedule_callback(callback_query: types.CallbackQuery):
    try:
        await clear_coffee_schedule()
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="coffee_schedule")
        keyboard.adjust(1)
        
        await callback_query.message.edit_text(
            "üóë <b>–ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã –æ—á–∏—â–µ–Ω</b>",
            reply_markup=keyboard.as_markup(),
            parse_mode=ParseMode.HTML
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@dp.message(CoffeeSchedule.waiting_for_schedule)
async def process_coffee_schedule(message: types.Message, state: FSMContext):
    try:
        schedule_text = message.text.strip()
        lines = schedule_text.split('\n')
        
        entries = []
        errors = []
        
        for i, line in enumerate(lines, 1):
            line = line.strip()
            if not line:
                continue
                
            if ':' not in line:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ")
                continue
                
            fio, date_str = line.split(':', 1)
            fio = fio.strip()
            date_str = date_str.strip()
            
            if not fio:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –ø—É—Å—Ç–æ–µ –§–ò–û")
                continue
                
            if not date_str:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –ø—É—Å—Ç–∞—è –¥–∞—Ç–∞")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–î–î.–ú–ú.–ì–ì–ì–ì)
            try:
                date_obj = datetime.strptime(date_str, '%d.%m.%Y')
                formatted_date = date_obj.strftime('%Y-%m-%d')
            except ValueError:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã '{date_str}' (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –î–î.–ú–ú.–ì–ì–ì–ì)")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
            if date_obj.date() < datetime.now().date():
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –¥–∞—Ç–∞ '{date_str}' –≤ –ø—Ä–æ—à–ª–æ–º")
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ –§–ò–û
            user_id = await get_user_id_by_fio(fio)
            if not user_id:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{fio}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                continue
            
            entries.append((fio, formatted_date, user_id))
        
        if errors:
            error_text = "‚ùå <b>–û—à–∏–±–∫–∏ –≤ –≥—Ä–∞—Ñ–∏–∫–µ:</b>\n\n" + "\n".join(errors)
            await message.answer(error_text, parse_mode=ParseMode.HTML)
            return
        
        if not entries:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –≥—Ä–∞—Ñ–∏–∫–µ.")
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É
        for fio, date, user_id in entries:
            await add_coffee_schedule_entry(fio, date, message.from_user.id, user_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä–∞—Ñ–∏–∫–∞
        notified_count = 0
        for fio, date, user_id in entries:
            try:
                await bot.send_message(
                    user_id,
                    f"‚òï <b>–í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ –≥—Ä–∞—Ñ–∏–∫ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã!</b>\n\n"
                    f"üìÖ <b>–î–∞—Ç–∞:</b> {date}\n"
                    f"üë§ <b>–í–∞—à–µ –§–ò–û:</b> {fio}\n\n"
                    f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–º—ã—Ç—å –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É!",
                    parse_mode=ParseMode.HTML
                )
                notified_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
        schedule = await get_all_coffee_schedule()
        for entry in schedule:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ None
            if entry[2] is None:
                logger.warning(f"–ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å –ø—É—Å—Ç–æ–π –¥–∞—Ç–æ–π –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: entry_id={entry[0]}, fio={entry[1]}")
                continue
            if entry[1] in [e[0] for e in entries] and entry[2] in [e[1] for e in entries]:
                await mark_coffee_notification_sent(entry[0])
        
        success_text = (
            f"‚úÖ <b>–ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üìä <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:</b> {len(entries)}\n"
            f"üì® <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {notified_count}\n\n"
            f"–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
        )
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≥—Ä–∞—Ñ–∏–∫–æ–º", callback_data="coffee_schedule")
        keyboard.adjust(1)
        
        await message.answer(
            success_text,
            reply_markup=keyboard.as_markup(),
            parse_mode=ParseMode.HTML
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞.")
        await state.clear()

async def check_today_coffee_schedule():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ 11:00)"""
    try:
        today = datetime.now().strftime('%Y-%m-%d')
        schedule = await get_today_coffee_schedule_for_notification()
        
        if not schedule:
            logger.info("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ –≤ 11:00: –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            return
        
        logger.info(f"üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ –≤ 11:00: –Ω–∞–π–¥–µ–Ω–æ {len(schedule)} –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
        
        for entry in schedule:
            entry_id, fio, date, user_id, created_by, created_at, notified_at, reminder_sent_at = entry
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å: {fio} –Ω–∞ {date} (user_id: {user_id})")
        
        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ –≤ 11:00 –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ –≤ 11:00: {e}")

async def send_coffee_notifications():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–º—ã–≤–∫–µ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ 16:00)"""
    try:
        today = datetime.now().strftime('%Y-%m-%d')
        schedule = await get_today_coffee_schedule_for_notification()
        
        if not schedule:
            logger.info("üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ—Ñ–µ –≤ 16:00: –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            return
        
        logger.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ—Ñ–µ –≤ 16:00: –Ω–∞–π–¥–µ–Ω–æ {len(schedule)} –∑–∞–ø–∏—Å–µ–π")
        
        sent_count = 0
        error_count = 0
        
        for entry in schedule:
            entry_id, fio, date, user_id, created_by, created_at, notified_at, reminder_sent_at = entry
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –§–ò–û –≤ –±–∞–∑–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_info = await get_user_by_fio(fio)
            
            if not user_info:
                logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –§–ò–û '{fio}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                error_count += 1
                continue
            
            user_id = user_info[0]  # user_id –∏–∑ –±–∞–∑—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            
            try:
                await bot.send_message(
                    user_id,
                    f"‚òï <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–º—ã–≤–∫–µ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã!</b>\n\n"
                    f"üë§ <b>–í–∞—à–µ –§–ò–û:</b> {fio}\n"
                    f"üìÖ <b>–°–µ–≥–æ–¥–Ω—è:</b> {date}\n\n"
                    f"–°–µ–≥–æ–¥–Ω—è –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –º—ã—Ç—å –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É! "
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å.\n\n"
                    f"‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {datetime.now().strftime('%H:%M')}",
                    parse_mode=ParseMode.HTML
                )
                
                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                await mark_coffee_notification_sent_by_fio(fio, date)
                
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ—Ñ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({fio})")
                sent_count += 1
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({fio}): {e}")
                error_count += 1
        
        logger.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ—Ñ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count}, –æ—à–∏–±–æ–∫ {error_count}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ—Ñ–µ: {e}")

async def schedule_coffee_notifications():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ—Ñ–µ–º–∞—à–∏–Ω–µ"""
    logger.info("‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ—Ñ–µ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ 11:00, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ 16:00)")
    
    while True:
        try:
            now = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ 11:00
            if now.hour == 11 and now.minute == 0:
                logger.info("üïê 11:00 - –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ")
                await check_today_coffee_schedule()
                # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
                await asyncio.sleep(60)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ 16:00
            elif now.hour == 16 and now.minute == 0:
                logger.info("üïê 16:00 - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ—Ñ–µ")
                await send_coffee_notifications()
                # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
                await asyncio.sleep(60)
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                await asyncio.sleep(60)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ—Ñ–µ: {e}")
            await asyncio.sleep(60)

@dp.message(Command("test_coffee_notification"))
async def test_coffee_notification_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ—Ñ–µ–º–∞—à–∏–Ω–µ"""
    try:
        user_role = await get_user_role(message.from_user.id)
        if user_role not in ["admin", "moderator"]:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        await message.answer("‚òï –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ—Ñ–µ–º–∞—à–∏–Ω–µ...")
        await send_coffee_notifications()
        await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ—Ñ–µ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

@dp.message(Command("test_coffee_check"))
async def test_coffee_check_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ"""
    try:
        user_role = await get_user_role(message.from_user.id)
        if user_role not in ["admin", "moderator"]:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        await message.answer("üìã –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ...")
        await check_today_coffee_schedule()
        await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ.")

@dp.message(Command("send_coffee_notifications"))
async def send_coffee_notifications_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ—Ñ–µ"""
    try:
        user_role = await get_user_role(message.from_user.id)
        if user_role not in ["admin", "moderator"]:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        await message.answer("‚òï –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ—Ñ–µ–º–∞—à–∏–Ω–µ...")
        await send_coffee_notifications()
        await message.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ—Ñ–µ–º–∞—à–∏–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ—Ñ–µ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ—Ñ–µ.")

@dp.message(Command("show_coffee_schedule"))
async def show_coffee_schedule_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ"""
    try:
        user_role = await get_user_role(message.from_user.id)
        if user_role not in ["admin", "moderator"]:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        await message.answer("üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å—å –≥—Ä–∞—Ñ–∏–∫ –∫–æ—Ñ–µ...")
        schedule = await get_all_coffee_schedule()
        
        if not schedule:
            await message.answer("üìã –ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ñ–µ –ø—É—Å—Ç.")
            return
        
        text = f"üìã <b>–í–µ—Å—å –≥—Ä–∞—Ñ–∏–∫ –∫–æ—Ñ–µ ({len(schedule)} –∑–∞–ø–∏—Å–µ–π):</b>\n\n"
        
        for i, entry in enumerate(schedule, 1):
            entry_id, fio, date, user_id, created_by, created_at, notified_at, reminder_sent_at = entry
            date_str = str(date) if date is not None else "NULL"
            text += f"{i}. <b>{fio}</b> - {date_str} (ID: {entry_id})\n"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(text) > 4096:
            parts = [text[i:i+4096] for i in range(0, len(text), 4096)]
            for i, part in enumerate(parts):
                await message.answer(f"{part}\n\n<i>–ß–∞—Å—Ç—å {i+1}/{len(parts)}</i>", parse_mode=ParseMode.HTML)
        else:
            await message.answer(text, parse_mode=ParseMode.HTML)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ.")

@dp.message(Command("fix_coffee_dates"))
async def fix_coffee_dates_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è NULL –¥–∞—Ç –≤ –≥—Ä–∞—Ñ–∏–∫–µ –∫–æ—Ñ–µ"""
    try:
        user_role = await get_user_role(message.from_user.id)
        if user_role not in ["admin", "moderator"]:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        await message.answer("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º NULL –¥–∞—Ç—ã –≤ –≥—Ä–∞—Ñ–∏–∫–µ –∫–æ—Ñ–µ...")
        fixed_count = await fix_null_dates_in_coffee_schedule()
        await message.answer(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} –∑–∞–ø–∏—Å–µ–π —Å NULL –¥–∞—Ç–∞–º–∏!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç –≤ –≥—Ä–∞—Ñ–∏–∫–µ –∫–æ—Ñ–µ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç –≤ –≥—Ä–∞—Ñ–∏–∫–µ –∫–æ—Ñ–µ.")

@dp.message(Command("clean_coffee_schedule"))
async def clean_coffee_schedule_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ"""
    try:
        user_role = await get_user_role(message.from_user.id)
        if user_role not in ["admin", "moderator"]:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        await message.answer("üßπ –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ...")
        await clean_invalid_coffee_entries()
        await message.answer("‚úÖ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ –æ—á–∏—â–µ–Ω—ã!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ.")

@dp.message(Command("clear_keyboards"))
async def clear_keyboards_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not await is_authorized(message.from_user.id):
        await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")
        return
    
    role = await get_user_role(message.from_user.id)
    if role != 'admin':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    await message.answer("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    cleared_count = await clear_old_keyboards()
    await message.answer(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {cleared_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@dp.message(Command("cleanup_env"))
async def cleanup_env_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π –∏–∑ .env —Ñ–∞–π–ª–∞"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        await cleanup_env_roles()
        await message.answer("‚úÖ –°—Ç–∞—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–æ–ª–µ–π —É–¥–∞–ª–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ .env —Ñ–∞–π–ª–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ .env —Ñ–∞–π–ª–∞.")

# –ú–µ–Ω—é –ø–æ–∏—Å–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
def get_search_menu_keyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîç –ü–æ–∏—Å–∫ –ø–æ –§–ò–û", callback_data="search_by_fio")
    keyboard.button(text="üîç –ü–æ–∏—Å–∫ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏", callback_data="search_by_position")
    keyboard.button(text="üîç –ü–æ–∏—Å–∫ –ø–æ –æ—Ç–¥–µ–ª—É", callback_data="search_by_department")
    keyboard.button(text="üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", callback_data="search_by_phone")
    keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    keyboard.adjust(2, 2, 1)
    return keyboard.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞
@dp.callback_query(lambda c: c.data == "back_to_search_menu")
async def back_to_search_menu_callback(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "üîç –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_search_menu_keyboard()
    )
    await callback_query.answer()

# –ü–æ—Å–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" (–≤–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞)
def get_back_to_search_menu_keyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É", callback_data="back_to_search_menu")
    return keyboard.as_markup()

# –û–±–Ω–æ–≤–ª—è–µ–º process_search_fio
@dp.message(Search.waiting_for_fio)
async def process_search_fio(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    current_data = await state.get_data()
    logger.info(f"[SEARCH] user_id={message.from_user.id}, state={current_state}, data={current_data}, text={message.text}")
    await state.update_data(pending_channel_request=False)
    fio = message.text.strip()
    
    if not fio or len(fio) < 2:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –¥–ª—è –ø–æ–∏—Å–∫–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).",
            parse_mode=ParseMode.HTML,
            reply_markup=get_back_to_search_menu_keyboard()
        )
        await state.clear()
        return
    
    logger.info(f"–ü–æ–∏—Å–∫ –ø–æ –§–ò–û: user_id={message.from_user.id}, query='{fio}'")
    results = search_by_fio(data_manager.df, fio)
    
    if results.empty:
        await message.answer(
            f"‚ùå <b>–ü–æ–∏—Å–∫ –ø–æ –§–ò–û</b>\n\n"
            f"üîç <b>–ó–∞–ø—Ä–æ—Å:</b> {fio}\n"
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏/–æ—Ç–¥–µ–ª—É.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_back_to_search_menu_keyboard()
        )
    else:
        await message.answer(
            f"‚úÖ <b>–ü–æ–∏—Å–∫ –ø–æ –§–ò–û</b>\n\n"
            f"üîç <b>–ó–∞–ø—Ä–æ—Å:</b> {fio}\n"
            f"üìä <b>–ù–∞–π–¥–µ–Ω–æ:</b> {len(results)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:",
            parse_mode=ParseMode.HTML
        )
        for idx, row in results.iterrows():
            caption = format_employee_caption(row)
            photo = getattr(row, '–§–æ—Ç–æ', None)
            if photo and isinstance(photo, str) and photo.lower() not in ('nan', 'none', ''):
                if photo.startswith("http://") or photo.startswith("https://"):
                    media = photo
                elif os.path.isfile(photo):
                    media = FSInputFile(photo)
                else:
                    media = photo
                try:
                    await message.answer_photo(photo=media, caption=caption, parse_mode=ParseMode.HTML)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ ¬´{photo}¬ª: {e}")
                    await message.answer(caption, parse_mode=ParseMode.HTML)
            else:
                await message.answer(caption, parse_mode=ParseMode.HTML)
        # –ü–æ—Å–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Äî –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        await message.answer("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É", reply_markup=get_back_to_search_menu_keyboard())
    logger.info(f"–ü–æ–∏—Å–∫ –ø–æ –§–ò–û –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    await state.clear()

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
@dp.message(Search.waiting_for_position)
async def process_search_position(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    current_data = await state.get_data()
    logger.info(f"[SEARCH] user_id={message.from_user.id}, state={current_state}, data={current_data}, text={message.text}")
    await state.update_data(pending_channel_request=False)
    position = message.text.strip()
    
    if not position or len(position) < 2:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).",
            parse_mode=ParseMode.HTML,
            reply_markup=get_back_to_search_menu_keyboard()
        )
        await state.clear()
        return
    
    logger.info(f"–ü–æ–∏—Å–∫ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: user_id={message.from_user.id}, query='{position}'")
    results = search_by_position(data_manager.df, position)
    
    if results.empty:
        await message.answer(
            f"‚ùå <b>–ü–æ–∏—Å–∫ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏</b>\n\n"
            f"üîç <b>–ó–∞–ø—Ä–æ—Å:</b> {position}\n"
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –§–ò–û/–æ—Ç–¥–µ–ª—É.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_back_to_search_menu_keyboard()
        )
    else:
        await message.answer(
            f"‚úÖ <b>–ü–æ–∏—Å–∫ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏</b>\n\n"
            f"üîç <b>–ó–∞–ø—Ä–æ—Å:</b> {position}\n"
            f"üìä <b>–ù–∞–π–¥–µ–Ω–æ:</b> {len(results)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:",
            parse_mode=ParseMode.HTML
        )
        for idx, row in results.iterrows():
            caption = format_employee_caption(row)
            photo = getattr(row, '–§–æ—Ç–æ', None)
            if photo and isinstance(photo, str) and photo.lower() not in ('nan', 'none', ''):
                if photo.startswith("http://") or photo.startswith("https://"):
                    media = photo
                elif os.path.isfile(photo):
                    media = FSInputFile(photo)
                else:
                    media = photo
                try:
                    await message.answer_photo(photo=media, caption=caption, parse_mode=ParseMode.HTML)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ ¬´{photo}¬ª: {e}")
                    await message.answer(caption, parse_mode=ParseMode.HTML)
            else:
                await message.answer(caption, parse_mode=ParseMode.HTML)
        await message.answer("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É", reply_markup=get_back_to_search_menu_keyboard())
    logger.info(f"–ü–æ–∏—Å–∫ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    await state.clear()

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –æ—Ç–¥–µ–ª—É
@dp.message(Search.waiting_for_department)
async def process_search_department(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    current_data = await state.get_data()
    logger.info(f"[SEARCH] user_id={message.from_user.id}, state={current_state}, data={current_data}, text={message.text}")
    await state.update_data(pending_channel_request=False)
    department = message.text.strip()
    
    if not department or len(department) < 2:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–¥–µ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).",
            parse_mode=ParseMode.HTML,
            reply_markup=get_back_to_search_menu_keyboard()
        )
        await state.clear()
        return
    
    logger.info(f"–ü–æ–∏—Å–∫ –ø–æ –æ—Ç–¥–µ–ª—É: user_id={message.from_user.id}, query='{department}'")
    results = search_by_department(data_manager.df, department)
    
    if results.empty:
        await message.answer(
            f"‚ùå <b>–ü–æ–∏—Å–∫ –ø–æ –æ—Ç–¥–µ–ª—É</b>\n\n"
            f"üîç <b>–ó–∞–ø—Ä–æ—Å:</b> {department}\n"
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –§–ò–û/–¥–æ–ª–∂–Ω–æ—Å—Ç–∏.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_back_to_search_menu_keyboard()
        )
    else:
        await message.answer(
            f"‚úÖ <b>–ü–æ–∏—Å–∫ –ø–æ –æ—Ç–¥–µ–ª—É</b>\n\n"
            f"üîç <b>–ó–∞–ø—Ä–æ—Å:</b> {department}\n"
            f"üìä <b>–ù–∞–π–¥–µ–Ω–æ:</b> {len(results)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:",
            parse_mode=ParseMode.HTML
        )
        for idx, row in results.iterrows():
            caption = format_employee_caption(row)
            photo = getattr(row, '–§–æ—Ç–æ', None)
            if photo and isinstance(photo, str) and photo.lower() not in ('nan', 'none', ''):
                if photo.startswith("http://") or photo.startswith("https://"):
                    media = photo
                elif os.path.isfile(photo):
                    media = FSInputFile(photo)
                else:
                    media = photo
                try:
                    await message.answer_photo(photo=media, caption=caption, parse_mode=ParseMode.HTML)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ ¬´{photo}¬ª: {e}")
                    await message.answer(caption, parse_mode=ParseMode.HTML)
            else:
                await message.answer(caption, parse_mode=ParseMode.HTML)
        await message.answer("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É", reply_markup=get_back_to_search_menu_keyboard())
    logger.info(f"–ü–æ–∏—Å–∫ –ø–æ –æ—Ç–¥–µ–ª—É –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    await state.clear()

@dp.callback_query(lambda c: c.data == "download_contacts")
async def download_contacts_callback(callback_query: types.CallbackQuery):
    try:
        import tempfile
        df = data_manager.df
        with tempfile.NamedTemporaryFile(mode='w+b', suffix='.xlsx', delete=False) as tmp_file:
            df.to_excel(tmp_file.name, index=False)
            await callback_query.message.answer_document(
                FSInputFile(tmp_file.name, filename="contacts.xlsx"), 
                caption="–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã"
            )
        os.unlink(tmp_file.name)
        await callback_query.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.", show_alert=True)



# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (KeyboardInterrupt)")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞") 
