"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞
"""

import html
import re
from typing import Optional


def escape_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ"""
    if not text:
        return ""
    return html.escape(str(text))


def format_user_info(user_id: int, username: str, fio: str, position: str, role: str = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    safe_fio = escape_html(fio) if fio else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    safe_username = escape_html(username) if username else '–ù–µ—Ç'
    safe_position = escape_html(position) if position else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    safe_role = escape_html(role) if role else 'user'
    
    text = f"üë§ <b>{safe_fio}</b>\n"
    text += f"üÜî ID: <code>{user_id}</code>\n"
    text += f"üì± @{safe_username}\n"
    text += f"üíº {safe_position}\n"
    
    if role:
        text += f"üëë –†–æ–ª—å: {safe_role}\n"
    
    return text


def validate_fio(fio: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –§–ò–û"""
    if not fio or len(fio.strip()) < 2:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –§–ò–û —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã
    pattern = r'^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s\-\.]+$'
    return bool(re.match(pattern, fio.strip()))


def validate_phone(phone: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if not phone:
        return False
    
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
    clean_phone = re.sub(r'[^\d+]', '', phone)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    patterns = [
        r'^\+7\d{10}$',  # +7XXXXXXXXXX
        r'^8\d{10}$',    # 8XXXXXXXXXX
        r'^7\d{10}$',    # 7XXXXXXXXXX
        r'^\d{3,4}$',    # –ö–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä XXX –∏–ª–∏ XXXX
    ]
    
    return any(re.match(pattern, clean_phone) for pattern in patterns)


def truncate_text(text: str, max_length: int = 100, suffix: str = "...") -> str:
    """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if not text or len(text) <= max_length:
        return text
    
    return text[:max_length - len(suffix)] + suffix


def format_datetime(dt, format_str: str = "%d.%m.%Y %H:%M") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è"""
    if not dt:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    try:
        return dt.strftime(format_str)
    except:
        return str(dt)


def clean_callback_data(data: str) -> str:
    """–û—á–∏—â–∞–µ—Ç callback_data –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if not data:
        return ""
    
    # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç callback_data –¥–æ 64 –±–∞–π—Ç
    data = data[:64]
    
    # –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    return re.sub(r'[^\w\-_]', '_', data)


def get_role_display_name(role: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ä–æ–ª–∏"""
    role_names = {
        'admin': 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        'moderator': 'üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
        'marketer': 'üì¢ –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥',
        'user': 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    }
    return role_names.get(role, role) 