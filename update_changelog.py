#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç –≤ CHANGELOG.md
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞—Ç
"""

import os
import re
from datetime import datetime
import argparse

def get_current_date():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD"""
    return datetime.now().strftime("%Y-%m-%d")

def update_changelog_date(changelog_path="CHANGELOG.md", version="1.0.0"):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞—Ç—É –≤ CHANGELOG.md –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    
    Args:
        changelog_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É CHANGELOG.md
        version (str): –í–µ—Ä—Å–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã
    """
    
    if not os.path.exists(changelog_path):
        print(f"‚ùå –§–∞–π–ª {changelog_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    with open(changelog_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    current_date = get_current_date()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–µ—Ä—Å–∏–∏ —Å –¥–∞—Ç–æ–π
    pattern = rf'## \[{re.escape(version)}\] - \d{{4}}-\d{{2}}-\d{{2}}'
    replacement = f'## [{version}] - {current_date}'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞—Ç–∞ –¥–ª—è —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏
    if re.search(pattern, content):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∞—Ç—É
        new_content = re.sub(pattern, replacement, content)
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –¥–ª—è –≤–µ—Ä—Å–∏–∏ {version}: {current_date}")
    else:
        # –ò—â–µ–º –≤–µ—Ä—Å–∏—é –±–µ–∑ –¥–∞—Ç—ã
        pattern_no_date = rf'## \[{re.escape(version)}\]'
        if re.search(pattern_no_date, content):
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∫ –≤–µ—Ä—Å–∏–∏ –±–µ–∑ –¥–∞—Ç—ã
            new_content = re.sub(pattern_no_date, replacement, content)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –¥–ª—è –≤–µ—Ä—Å–∏–∏ {version}: {current_date}")
        else:
            print(f"‚ùå –í–µ—Ä—Å–∏—è {version} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ CHANGELOG.md")
            return False
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    with open(changelog_path, 'w', encoding='utf-8') as f:
        f.write(new_content)
    
    return True

def create_release_entry(changelog_path="CHANGELOG.md", version=None):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Ä–µ–ª–∏–∑–∞ –≤ CHANGELOG.md
    
    Args:
        changelog_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É CHANGELOG.md
        version (str): –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    """
    
    if not os.path.exists(changelog_path):
        print(f"‚ùå –§–∞–π–ª {changelog_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    if not version:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ –≤–µ—Ä—Å–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ–ª–∏–∑–∞!")
        return False
    
    current_date = get_current_date()
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    with open(changelog_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Ä–µ–ª–∏–∑–∞
    new_release = f"""## [{version}] - {current_date}

### –î–æ–±–∞–≤–ª–µ–Ω–æ
- 

### –ò–∑–º–µ–Ω–µ–Ω–æ
- 

### –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
- 

"""
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –ø–æ—Å–ª–µ [Unreleased]
    pattern = r'(## \[Unreleased\].*?)(\n## \[)'
    replacement = rf'\1\n\n{new_release}\2'
    
    if re.search(pattern, content, re.DOTALL):
        new_content = re.sub(pattern, replacement, content, flags=re.DOTALL)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Ä–µ–ª–∏–∑–∞ –¥–ª—è –≤–µ—Ä—Å–∏–∏ {version}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ–∫—Ü–∏—é [Unreleased]")
        return False
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    with open(changelog_path, 'w', encoding='utf-8') as f:
        f.write(new_content)
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    parser = argparse.ArgumentParser(description='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç –≤ CHANGELOG.md')
    parser.add_argument('--file', '-f', default='CHANGELOG.md', 
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É CHANGELOG.md (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: CHANGELOG.md)')
    parser.add_argument('--version', '-v', default='1.0.0',
                       help='–í–µ—Ä—Å–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1.0.0)')
    parser.add_argument('--new-release', '-n', 
                       help='–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Ä–µ–ª–∏–∑–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π')
    
    args = parser.parse_args()
    
    print(f"üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {get_current_date()}")
    
    if args.new_release:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Ä–µ–ª–∏–∑–∞
        success = create_release_entry(args.file, args.new_release)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏
        success = update_changelog_date(args.file, args.version)
    
    if success:
        print(f"‚úÖ CHANGELOG.md —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ CHANGELOG.md")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main()) 