"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import logging
from datetime import datetime
from typing import List, Dict, Any, Optional
from aiogram import Bot
from aiogram.enums import ParseMode

logger = logging.getLogger(__name__)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
    
    async def send_to_user(self, user_id: int, message: str, parse_mode: ParseMode = ParseMode.HTML) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            await self.bot.send_message(user_id, message, parse_mode=parse_mode)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    
    async def send_to_all_users(self, message: str, parse_mode: ParseMode = ParseMode.HTML) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            from database import get_authorized_users
            
            users = await get_authorized_users()
            if not users:
                return {
                    'success': False,
                    'error': '–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                    'sent_count': 0,
                    'total_count': 0
                }
            
            sent_count = 0
            failed_users = []
            
            for user in users:
                user_id = user[0]  # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                
                try:
                    await self.bot.send_message(user_id, message, parse_mode=parse_mode)
                    sent_count += 1
                    logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    failed_users.append(user_id)
            
            return {
                'success': True,
                'sent_count': sent_count,
                'failed_count': len(failed_users),
                'total_count': len(users),
                'failed_users': failed_users,
                'timestamp': datetime.now().isoformat()
            }
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return {
                'success': False,
                'error': str(e),
                'sent_count': 0,
                'total_count': 0
            }
    
    async def send_to_channel(self, channel_id: int, message: str, parse_mode: ParseMode = ParseMode.HTML) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª"""
        try:
            await self.bot.send_message(channel_id, message, parse_mode=parse_mode)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel_id}")
            return True
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª {channel_id}: {e}")
            return False
    
    async def send_admin_notification(self, admin_id: int, title: str, message: str, 
                                    parse_mode: ParseMode = ParseMode.HTML) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        try:
            formatted_message = f"üîî <b>{title}</b>\n\n{message}\n\nüìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            return await self.send_to_user(admin_id, formatted_message, parse_mode)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
            return False
    
    async def send_role_based_notification(self, message: str, roles: List[str], 
                                         parse_mode: ParseMode = ParseMode.HTML) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏"""
        try:
            from database import get_users_by_roles
            
            users = await get_users_by_roles(roles)
            if not users:
                return {
                    'success': False,
                    'error': f'–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏: {", ".join(roles)}',
                    'sent_count': 0,
                    'total_count': 0
                }
            
            sent_count = 0
            failed_users = []
            
            for user in users:
                user_id = user[0]  # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                
                try:
                    await self.bot.send_message(user_id, message, parse_mode=parse_mode)
                    sent_count += 1
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    failed_users.append(user_id)
            
            return {
                'success': True,
                'sent_count': sent_count,
                'failed_count': len(failed_users),
                'total_count': len(users),
                'failed_users': failed_users,
                'roles': roles,
                'timestamp': datetime.now().isoformat()
            }
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ —Ä–æ–ª—è–º: {e}")
            return {
                'success': False,
                'error': str(e),
                'sent_count': 0,
                'total_count': 0
            }
    
    async def send_coffee_reminder(self, user_id: int, fio: str, date: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ—Ñ–µ"""
        try:
            message = f"‚òï <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ—Ñ–µ</b>\n\n"
            message += f"üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> {fio}\n"
            message += f"üìÖ <b>–î–∞—Ç–∞:</b> {date}\n\n"
            message += f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ—Ñ–µ –¥–ª—è –∫–æ–ª–ª–µ–≥! ‚òï"
            
            return await self.send_to_user(user_id, message)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–æ—Ñ–µ: {e}")
            return False


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async def send_notification_to_all(bot: Bot, message: str) -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    service = NotificationService(bot)
    return await service.send_to_all_users(message)


async def send_admin_alert(bot: Bot, admin_id: int, title: str, message: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    service = NotificationService(bot)
    return await service.send_admin_notification(admin_id, title, message) 