from flask import Flask, render_template, request, redirect, url_for, session, send_from_directory, send_file, flash
import requests
import sqlite3
import pandas as pd
import io
import os
from config import BOT_TOKEN, CHAT_ID, GROUP_CHAT_ID, CHANNEL_CHAT_ID, EXCEL_FILE, ADMIN_WEB_PASSWORD, MODERATOR_WEB_PASSWORD, DB_PATH

app = Flask(__name__)
app.secret_key = 'your_secret_key_here'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞–¥—ë–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–æ–ª–∏
def login_required(role=None):
    def decorator(func):
        def wrapper(*args, **kwargs):
            if "role" not in session:
                return redirect(url_for('login'))
            if role and session.get("role") != role:
                flash("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", "danger")
                return redirect(url_for('dashboard'))
            return func(*args, **kwargs)
        wrapper.__name__ = func.__name__
        return wrapper
    return decorator

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        role = request.form.get("role")
        password = request.form.get("password")
        if role == "admin":
            if password == ADMIN_WEB_PASSWORD:
                session["role"] = "admin"
                return redirect(url_for('dashboard'))
            else:
                flash("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", "danger")
        elif role == "moderator":
            if password == MODERATOR_WEB_PASSWORD:
                session["role"] = "moderator"
                return redirect(url_for('dashboard'))
            else:
                flash("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.", "danger")
        else:
            flash("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å.", "danger")
    return render_template("login.html")

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('login'))

@app.route('/')
@login_required()
def dashboard():
    return render_template("dashboard.html", role=session.get("role"))

@app.route('/publish', methods=['GET', 'POST'])
@login_required()
def publish():
    if request.method == 'POST':
        news_text = request.form.get('news_text')
        image_file = request.files.get('image_file')
        if not news_text and (not image_file or image_file.filename == ""):
            flash("–ù–æ–≤–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.", 'danger')
            return redirect(url_for('dashboard'))
        if image_file and image_file.filename != "":
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
            data = {
                'chat_id': CHAT_ID,
                'caption': f"üì¢ –ù–æ–≤–æ—Å—Ç—å:\n\n{news_text}" if news_text else ""
            }
            files = {'photo': image_file.stream}
            r = requests.post(url, data=data, files=files)
        else:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
            data = {
                'chat_id': CHAT_ID,
                'text': f"üì¢ –ù–æ–≤–æ—Å—Ç—å:\n\n{news_text}"
            }
            r = requests.post(url, data=data)
        if r.ok:
            flash("–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!", 'success')
        else:
            flash("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.", 'danger')
        return redirect(url_for('dashboard'))
    return render_template("publish.html")

@app.route('/publish_group', methods=['GET', 'POST'])
@login_required()
def publish_group():
    if request.method == 'POST':
        news_text = request.form.get('news_text')
        image_file = request.files.get('image_file')
        if not news_text and (not image_file or image_file.filename == ""):
            flash("–ù–æ–≤–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.", 'danger')
            return redirect(url_for('dashboard'))
        if image_file and image_file.filename != "":
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
            data = {
                'chat_id': GROUP_CHAT_ID,
                'caption': f"üì¢ –ù–æ–≤–æ—Å—Ç—å:\n\n{news_text}" if news_text else ""
            }
            files = {'photo': image_file.stream}
            r = requests.post(url, data=data, files=files)
        else:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
            data = {
                'chat_id': GROUP_CHAT_ID,
                'text': f"üì¢ –ù–æ–≤–æ—Å—Ç—å:\n\n{news_text}"
            }
            r = requests.post(url, data=data)
        if r.ok:
            flash("–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ!", 'success')
        else:
            flash("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø–µ.", 'danger')
        return redirect(url_for('dashboard'))
    return render_template("publish_group.html")

@app.route('/publish_channel', methods=['GET', 'POST'])
@login_required()
def publish_channel():
    if request.method == 'POST':
        news_text = request.form.get('news_text')
        image_file = request.files.get('image_file')
        if not news_text and (not image_file or image_file.filename == ""):
            flash("–ù–æ–≤–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.", 'danger')
            return redirect(url_for('dashboard'))
        if image_file and image_file.filename != "":
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
            data = {
                'chat_id': CHANNEL_CHAT_ID,
                'caption': f"üì¢ –ù–æ–≤–æ—Å—Ç—å:\n\n{news_text}" if news_text else ""
            }
            files = {'photo': image_file.stream}
            r = requests.post(url, data=data, files=files)
        else:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
            data = {
                'chat_id': CHANNEL_CHAT_ID,
                'text': f"üì¢ –ù–æ–≤–æ—Å—Ç—å:\n\n{news_text}"
            }
            r = requests.post(url, data=data)
        if r.ok:
            flash("–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ!", 'success')
        else:
            flash("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª–µ.", 'danger')
        return redirect(url_for('dashboard'))
    return render_template("publish_channel.html")

@app.route('/notify', methods=['GET', 'POST'])
@login_required()
def notify():
    if request.method == 'POST':
        notify_text = request.form.get('notify_text')
        if notify_text:
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute("SELECT user_id FROM authorized_users")
            rows = cursor.fetchall()
            conn.close()
            for row in rows:
                user_id = row[0]
                url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
                data = {
                    'chat_id': user_id,
                    'text': f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n\n{notify_text}"
                }
                requests.post(url, data=data)
            flash("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!", 'success')
        return redirect(url_for('dashboard'))
    return render_template("notify.html")

@app.route('/schedule', methods=['GET', 'POST'])
@login_required()
def schedule():
    if request.method == 'POST':
        schedule_text = request.form.get('schedule_text')
        if schedule_text:
            lines = schedule_text.splitlines()
            entries = []
            month_year_set = set()
            for line in lines:
                line = line.strip()
                if not line:
                    continue
                if ':' not in line:
                    flash(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: {line}", 'danger')
                    return redirect(url_for('schedule'))
                fio_part, date_part = line.split(':', 1)
                fio = fio_part.strip()
                date_str = date_part.strip()
                try:
                    date_obj = pd.to_datetime(date_str, format='%d-%m-%Y')
                    month_year = date_obj.strftime("%m-%Y")
                    month_year_set.add(month_year)
                    entries.append((fio, date_str))
                except Exception:
                    flash(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}", 'danger')
                    return redirect(url_for('schedule'))
            if len(month_year_set) != 1:
                flash("–í—Å–µ –¥–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –æ–¥–Ω–æ–º—É –º–µ—Å—è—Ü—É –∏ –≥–æ–¥—É.", 'danger')
                return redirect(url_for('schedule'))
            target_month_year = month_year_set.pop()
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute("DELETE FROM coffee_schedule WHERE date LIKE ?", (f"%-{target_month_year}",))
            for fio, date_str in entries:
                cursor.execute("INSERT INTO coffee_schedule (fio, date) VALUES (?, ?)", (fio, date_str))
            conn.commit()
            conn.close()
            flash("–ì—Ä–∞—Ñ–∏–∫ –Ω–∞ –º–µ—Å—è—Ü —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.", 'success')
            return redirect(url_for('dashboard'))
    return render_template("schedule.html")



@app.route('/download_schedule')
@login_required()
def download_schedule():
    try:
        conn = sqlite3.connect(DB_PATH)
        df = pd.read_sql_query("SELECT * FROM coffee_schedule", conn)
        conn.close()
        if df.empty:
            flash("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã.", 'warning')
            return redirect(url_for('dashboard'))
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name='Schedule')
        output.seek(0)
        return send_file(
            output,
            as_attachment=True,
            download_name='coffee_schedule.xlsx',
            mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
    except Exception as e:
        flash(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ñ–µ: {e}", 'danger')
        return redirect(url_for('dashboard'))

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in {'xlsx', 'xls'}

@app.route('/download_contacts')
@login_required()
def download_contacts():
    try:
        abs_path = os.path.abspath(EXCEL_FILE)
        if not os.path.exists(abs_path):
            flash(f"–§–∞–π–ª –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {abs_path}", 'danger')
            return redirect(url_for('dashboard'))
        directory = os.path.dirname(abs_path)
        filename = os.path.basename(abs_path)
        return send_from_directory(directory, filename, as_attachment=True, download_name='contacts.xlsx')
    except Exception as e:
        flash(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}", 'danger')
        return redirect(url_for('dashboard'))

@app.route('/edit_contacts', methods=['GET', 'POST'])
@login_required()
def edit_contacts():
    if request.method == 'POST':
        if 'contacts_file' not in request.files:
            flash("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ.", 'danger')
            return redirect(url_for('edit_contacts'))
        file = request.files['contacts_file']
        if file.filename == '':
            flash("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.", 'danger')
            return redirect(url_for('edit_contacts'))
        if file and allowed_file(file.filename):
            try:
                file.save(EXCEL_FILE)
                flash("–§–∞–π–ª –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.", 'success')
            except Exception as e:
                flash(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}", 'danger')
            return redirect(url_for('dashboard'))
        else:
            flash("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: .xlsx, .xls", 'danger')
            return redirect(url_for('edit_contacts'))
    return render_template("edit_contacts.html")


# –ú–∞—Ä—à—Ä—É—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@app.route('/admin_users', methods=['GET'])
@login_required("admin")
def admin_users():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, fio, position, role FROM authorized_users")
    users = cursor.fetchall()
    conn.close()
    return render_template("admin_users.html", users=users)

# –ú–∞—Ä—à—Ä—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–§–ò–û –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å)
@app.route('/edit_user/<int:user_id>', methods=['GET', 'POST'])
@login_required("admin")
def edit_user(user_id):
    if request.method == 'POST':
        fio = request.form.get('fio')
        position = request.form.get('position')
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("UPDATE authorized_users SET fio = ?, position = ? WHERE user_id = ?", (fio, position, user_id))
        conn.commit()
        conn.close()
        flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω.", "success")
        return redirect(url_for('admin_users'))
    else:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT fio, position FROM authorized_users WHERE user_id = ?", (user_id,))
        user = cursor.fetchone()
        conn.close()
        if user:
            fio, position = user
        else:
            flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "danger")
            return redirect(url_for('admin_users'))
        return render_template("admin_edit_user.html", user_id=user_id, fio=fio, position=position)



# –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

@app.route('/delete_user/<int:user_id>', methods=['GET'])
@login_required("admin")
def delete_user(user_id):
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM authorized_users WHERE user_id = ?", (user_id,))
        conn.commit()
        conn.close()
        flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", "success")
    except Exception as e:
        flash(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", "danger")
    return redirect(url_for('admin_users'))

# –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–Ω–∞–ª–∞ (–¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)
@app.route('/channel_users', methods=['GET'])
@login_required()
def channel_users():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, fio FROM channel_subscribers")
    users = cursor.fetchall()
    conn.close()
    return render_template("channel_users.html", users=users)

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–Ω–∞–ª–∞

@app.route('/delete_channel_user/<int:user_id>', methods=['GET'])
@login_required()
def delete_channel_user(user_id):
    # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if session.get("role") not in ["admin", "moderator"]:
        flash("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", "danger")
        return redirect(url_for('channel_users'))
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM channel_subscribers WHERE user_id = ?", (user_id,))
        conn.commit()
        conn.close()
        flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.", "success")
    except Exception as e:
        flash(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", "danger")
    return redirect(url_for('channel_users'))

#–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞

@app.route('/assign_role/<int:user_id>/<string:role>', methods=['GET'])
@login_required("admin")
def assign_role(user_id, role):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å –≤–∞–ª–∏–¥–Ω–∞
        valid_roles = ['user', 'moderator', 'admin', 'marketer']
        if role not in valid_roles:
            flash(f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å: {role}. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ä–æ–ª–∏: {', '.join(valid_roles)}", "danger")
            return redirect(url_for('admin_users'))
        
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute("SELECT 1 FROM authorized_users WHERE user_id = ?", (user_id,))
        user_exists = cursor.fetchone()
        
        if not user_exists:
            flash(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω", "danger")
            conn.close()
            return redirect(url_for('admin_users'))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å
        cursor.execute("UPDATE authorized_users SET role = ? WHERE user_id = ?", (role, user_id))
        conn.commit()
        conn.close()
        
        flash(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {role}.", "success")
    except Exception as e:
        flash(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}", "danger")
    return redirect(url_for('admin_users'))

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Flask —Å–µ—Ä–≤–µ—Ä–∞
@app.route('/shutdown')
def shutdown():
    func = request.environ.get('werkzeug.server.shutdown')
    if func is None:
        raise RuntimeError('Not running with the Werkzeug Server')
    func()
    return 'Server shutting down...'

def run_flask():
    app.run(host="0.0.0.0", port=5000, debug=False, use_reloader=False)

if __name__ == '__main__':
    run_flask()
