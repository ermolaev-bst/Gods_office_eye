import hashlib
import logging
import pandas as pd

logger = logging.getLogger(__name__)

def load_excel(file_path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç Excel-—Ñ–∞–π–ª –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ '–§–æ—Ç–æ'.
    –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ NaN ‚Äî –±—É–¥–µ—Ç None.
    """
    try:
        df = pd.read_excel(file_path)
        # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –§–æ—Ç–æ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
        if '–§–æ—Ç–æ' not in df.columns:
            df['–§–æ—Ç–æ'] = None
        else:
            # –ø—Ä–∏–≤–æ–¥–∏–º –≤—Å—ë –∫ —Å—Ç—Ä–æ–∫–µ, –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
            df['–§–æ—Ç–æ'] = df['–§–æ—Ç–æ'].astype(str).str.strip()
            # –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ 'nan' –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ None
            df.loc[df['–§–æ—Ç–æ'].isin(['', 'nan', 'None', 'NaN']), '–§–æ—Ç–æ'] = None
        return df
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Excel-—Ñ–∞–π–ª–∞: {e}")
        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º DataFrame —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏, —á—Ç–æ–±—ã –∫–æ–¥ –Ω–µ –ø–∞–¥–∞–ª
        cols = ['–§–ò–û', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–û—Ç–¥–µ–ª', '–§–æ—Ç–æ']
        return pd.DataFrame(columns=cols)

def search_by_fio(df, fio):
    """–ò—â–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –§–ò–û."""
#    return df[df['–§–ò–û'].str.contains(fio, case=False, na=False)]
    mask = df['–§–ò–û'].fillna('').astype(str).str.contains(fio, case=False)
    return df[mask]


def search_by_position(df, position):
    """–ò—â–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏."""
#    return df[df['–î–æ–ª–∂–Ω–æ—Å—Ç—å'].str.contains(position, case=False, na=False)]
    mask = df['–î–æ–ª–∂–Ω–æ—Å—Ç—å'].fillna('').astype(str).str.contains(position, case=False)
    return df[mask]


def search_by_department(df, department):
    """–ò—â–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–¥–µ–ª—É."""
#    return df[df['–û—Ç–¥–µ–ª'].str.contains(department, case=False, na=False)]
    mask = df['–û—Ç–¥–µ–ª'].fillna('').astype(str).str.contains(department, case=False)
    return df[mask]

class DataManager:
    def __init__(self, file_path):
        self.file_path = file_path
        self.df = load_excel(file_path)
        self.previous_hash = self.get_file_hash()

    def get_file_hash(self):
        hasher = hashlib.md5()
        try:
            with open(self.file_path, 'rb') as f:
                buf = f.read()
                hasher.update(buf)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ö—ç—à–∞ —Ñ–∞–π–ª–∞: {e}")
        return hasher.hexdigest()

    def reload_excel(self):
        self.df = load_excel(self.file_path)
        self.previous_hash = self.get_file_hash()

    def check_updates(self):
        current_hash = self.get_file_hash()
        messages = []
        if current_hash != self.previous_hash:
            old_df = self.df.copy()
            self.df = load_excel(self.file_path)
            self.previous_hash = current_hash

            if '–§–ò–û' in self.df.columns and '–î–æ–ª–∂–Ω–æ—Å—Ç—å' in self.df.columns:
                new_employees = self.df[~self.df['–§–ò–û'].isin(old_df['–§–ò–û'])]
                for _, row in new_employees.iterrows():
                    messages.append(f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É, {row['–§–ò–û']} ({row['–î–æ–ª–∂–Ω–æ—Å—Ç—å']})! üéâ")
                removed_employees = old_df[~old_df['–§–ò–û'].isin(self.df['–§–ò–û'])]
                for _, row in removed_employees.iterrows():
                    messages.append(f"üò¢ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É, {row['–§–ò–û']} ({row['–î–æ–ª–∂–Ω–æ—Å—Ç—å']}). –ú—ã –±—É–¥–µ–º —Å–∫—É—á–∞—Ç—å! üò¢")
        return messages
